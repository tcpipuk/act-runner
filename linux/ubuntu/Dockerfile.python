# Python runner image - builds on node
ARG UBUNTU_VERSION=24.04
ARG NODE_VERSIONS="20 22"
ARG PYTHON_VERSION=3.13
ARG NODE_IMAGE=git.tomfos.tr/tom/act-runner:ubuntu${UBUNTU_VERSION}-node20-22

# Use our node image as base
FROM ${NODE_IMAGE} AS base

# Python installation
FROM base AS final
ARG PYTHON_VERSION
ARG UBUNTU_VERSION
ARG NODE_VERSIONS
ARG TARGETARCH
ARG USE_NATIVE_PYTHON=""

# Add deadsnakes PPA if not using native Python
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    if [ -z "${USE_NATIVE_PYTHON}" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
        software-properties-common \
        && add-apt-repository ppa:deadsnakes/ppa -y \
        && rm -rf /var/lib/apt/lists/*; \
    fi

# Install Python packages
# If using native Python, install python3 and python3-apt for system tool compatibility
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    apt-get update && \
    if [ -n "${USE_NATIVE_PYTHON}" ]; then \
        apt-get install -y --no-install-recommends \
        python3 \
        python3-venv \
        python3-apt; \
    else \
        apt-get install -y --no-install-recommends \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-venv; \
    fi \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create Python symlinks (only needed for non-native Python)
RUN if [ -z "${USE_NATIVE_PYTHON}" ]; then \
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 100 && \
        update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 100; \
    fi

# Set up uv environment variables
ENV UV_PYTHON=${PYTHON_VERSION} \
    UV_LINK_MODE=copy

# Install uv (installs to /root/.local/bin by default)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Add uv and its tools to PATH
ENV PATH="/root/.local/bin:${PATH}"

# Install Python tools via uv
RUN --mount=type=cache,target=/root/.cache/uv,sharing=locked,id=uv-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    uv tool install prek \
    && uv tool install ruff \
    && uv tool install mypy \
    && uv tool install pytest \
    && uv tool install black \
    && uv tool install isort

# Install additional development tools - GitHub CLI and Rust
# These are frequently updated but small, so we install them after Python
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    mkdir -p -m 755 /etc/apt/keyrings /etc/apt/sources.list.d && \
    \
    # GitHub CLI repository
    wget -q -O- https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
    gpg --dearmor -o /etc/apt/keyrings/githubcli-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] \
    https://cli.github.com/packages stable main" \
    > /etc/apt/sources.list.d/github-cli.list && \
    \
    # Install GitHub CLI
    apt-get update && apt-get install -y --no-install-recommends gh && \
    rm -rf /var/lib/apt/lists/* && \
    \
    # Install Rust via official installer (rustup only, no default toolchain)
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
        sh -s -- -y --no-modify-path --profile minimal --default-toolchain none && \
    echo 'source $HOME/.cargo/env' >> /etc/bash.bashrc

# Update PATH to include Rust
ENV PATH="/root/.cargo/bin:${PATH}"

# Configure additional APT repositories for user convenience
# Users can install: clang, docker-ce, dotnet, kubectl, psql, terraform, etc.
ARG K8S_VERSION=1.31
RUN --mount=type=cache,target=/tmp/downloads,sharing=locked,id=downloads-${UBUNTU_VERSION}-${TARGETARCH} \
    mkdir -p -m 755 /etc/apt/keyrings /etc/apt/sources.list.d && \
    \
    # LLVM/Clang - for C/C++ development
    wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | \
    gpg --dearmor -o /etc/apt/keyrings/llvm-archive-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/llvm-archive-keyring.gpg] \
    http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs) main" \
    > /etc/apt/sources.list.d/llvm.list && \
    \
    # Kubernetes - for k8s operations
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/deb/Release.key | \
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \
    https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/deb/ /" \
    > /etc/apt/sources.list.d/kubernetes.list && \
    \
    # HashiCorp - for Terraform, Vault, Consul, etc.
    wget -q -O- https://apt.releases.hashicorp.com/gpg | \
    gpg --dearmor -o /etc/apt/keyrings/hashicorp-archive-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/hashicorp-archive-keyring.gpg] \
    https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
    > /etc/apt/sources.list.d/hashicorp.list && \
    \
    # PostgreSQL - for database tools
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
    gpg --dearmor -o /etc/apt/keyrings/postgresql-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/postgresql-keyring.gpg] \
    http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
    > /etc/apt/sources.list.d/postgresql.list && \
    \
    # Microsoft ecosystem (PowerShell, .NET, Azure CLI)
    PACKAGE_PATH="/tmp/downloads/packages-microsoft-prod-$(lsb_release -rs).deb" && \
    if [ ! -f "${PACKAGE_PATH}" ]; then \
    wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb \
    -O "${PACKAGE_PATH}"; \
    fi && \
    dpkg -i "${PACKAGE_PATH}" && \
    \
    # Ensure all apt keys have correct permissions (safety net)
    chmod 644 /etc/apt/keyrings/*.gpg 2>/dev/null || true

# Metadata labels (static values only for better caching)
LABEL org.opencontainers.image.title="act-runner-ubuntu${UBUNTU_VERSION}-node${NODE_VERSIONS// /-}-py${PYTHON_VERSION}" \
    org.opencontainers.image.description="ACT/Forgejo runner with Python ${PYTHON_VERSION} and Node.js ${NODE_VERSIONS} for Ubuntu ${UBUNTU_VERSION}" \
    org.opencontainers.image.url="https://git.tomfos.tr/tom/act-runner" \
    org.opencontainers.image.source="https://git.tomfos.tr/tom/act-runner" \
    org.opencontainers.image.documentation="https://git.tomfos.tr/tom/act-runner#readme" \
    org.opencontainers.image.vendor="git.tomfos.tr" \
    org.opencontainers.image.licenses="MIT" \
    org.opencontainers.image.authors="Tom Foster"
