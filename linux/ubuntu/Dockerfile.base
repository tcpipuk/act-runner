# Base ACT runner image with essential tools
ARG UBUNTU_VERSION=24.04
FROM ubuntu:${UBUNTU_VERSION} AS base

# Re-declare ARG after FROM
ARG UBUNTU_VERSION
ARG TARGETARCH
ARG RUNNER_UID=1001
ARG RUNNER_GID=1001
ARG RUNNER_USER=runner
ARG ENABLE_DEADSNAKES=true

# Set shell options for better error detection
SHELL ["/bin/bash", "-e", "-c"]

# Force non-interactive apt
ENV DEBIAN_FRONTEND=noninteractive

# Metadata (static values only for better caching)
LABEL org.opencontainers.image.title="act-runner-ubuntu${UBUNTU_VERSION}-base" \
    org.opencontainers.image.description="Optimized ACT/Forgejo runner base image with essential CI tools for Ubuntu ${UBUNTU_VERSION}" \
    org.opencontainers.image.url="https://git.tomfos.tr/tom/act-runner" \
    org.opencontainers.image.source="https://git.tomfos.tr/tom/act-runner" \
    org.opencontainers.image.documentation="https://git.tomfos.tr/tom/act-runner/src/branch/main/README.md" \
    org.opencontainers.image.vendor="git.tomfos.tr" \
    org.opencontainers.image.licenses="MIT" \
    org.opencontainers.image.authors="Tom Foster"

# Layer 1: Core essentials and build tools (rarely change)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    apt-get update && apt-get install -y --no-install-recommends \
    # Essentials and build tools (alphabetically sorted)
    apt-utils \
    build-essential \
    ca-certificates \
    cmake \
    curl \
    g++ \
    gcc \
    git \
    git-lfs \
    gnupg \
    gpg \
    libffi-dev \
    libssl-dev \
    lsb-release \
    make \
    pkg-config \
    software-properties-common \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Layer 2: Utilities (occasional changes, alphabetically sorted)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    apt-get update && apt-get install -y --no-install-recommends \
    bzip2 \
    file \
    gzip \
    jq \
    openssh-client \
    patch \
    rsync \
    sudo \
    tar \
    unzip \
    xz-utils \
    zip \
    && rm -rf /var/lib/apt/lists/*

# Configure all APT repositories in a single layer
# This enables users to easily install: clang, docker-ce, gh, dotnet, kubectl, psql, terraform, python, etc.
# Note: gpg is required here but was installed in the previous layer
# K8S_VERSION can be provided as build arg, defaults to 1.31
ARG K8S_VERSION=1.31
RUN --mount=type=cache,target=/tmp/downloads,sharing=locked,id=downloads-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    mkdir -p -m 755 /etc/apt/keyrings /etc/apt/sources.list.d && \
    \
    # Clean up any old apt keys from previous builds and refresh APT's key cache
    rm -f /etc/apt/trusted.gpg.d/apt.llvm.org.asc 2>/dev/null || true && \
    rm -f /var/lib/apt/keyrings/apt.llvm.org.asc 2>/dev/null || true && \
    apt-key del 15CF4D18AF4F7421 2>/dev/null || true && \
    \
    # LLVM/Clang - for C/C++ development
    wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | \
    gpg --dearmor -o /etc/apt/keyrings/llvm-archive-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/llvm-archive-keyring.gpg] \
    http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs) main" \
    > /etc/apt/sources.list.d/llvm.list && \
    \
    # Kubernetes - for k8s operations
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/deb/Release.key | \
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \
    https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/deb/ /" \
    > /etc/apt/sources.list.d/kubernetes.list && \
    \
    # HashiCorp - for Terraform, Vault, Consul, etc.
    wget -O- https://apt.releases.hashicorp.com/gpg | \
    gpg --dearmor -o /etc/apt/keyrings/hashicorp-archive-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/hashicorp-archive-keyring.gpg] \
    https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
    > /etc/apt/sources.list.d/hashicorp.list && \
    \
    # GitHub CLI - for GitHub/Forgejo operations
    wget -q -O- https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
    gpg --dearmor -o /etc/apt/keyrings/githubcli-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] \
    https://cli.github.com/packages stable main" \
    > /etc/apt/sources.list.d/github-cli.list && \
    \
    # PostgreSQL - for database tools
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
    gpg --dearmor -o /etc/apt/keyrings/postgresql-keyring.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/postgresql-keyring.gpg] \
    http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
    > /etc/apt/sources.list.d/postgresql.list && \
    \
    # Microsoft ecosystem (PowerShell, .NET, Azure CLI)
    PACKAGE_PATH="/tmp/downloads/packages-microsoft-prod-$(lsb_release -rs).deb" && \
    if [ ! -f "${PACKAGE_PATH}" ]; then \
    wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb \
    -O "${PACKAGE_PATH}"; \
    fi && \
    dpkg -i "${PACKAGE_PATH}" && \
    \
    # Python deadsnakes PPA - controlled by build arg
    if [ "${ENABLE_DEADSNAKES}" = "true" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
        software-properties-common \
        && add-apt-repository ppa:deadsnakes/ppa -y \
        && rm -rf /var/lib/apt/lists/*; \
    fi && \
    \
    # Ensure all apt keys have correct permissions (safety net)
    chmod 644 /etc/apt/keyrings/*.gpg 2>/dev/null || true

# Layer 3: Frequently updated tools - Docker, GitHub CLI, Rust
# Using docker.io package for consistent multi-architecture support
# Rust installed via official installer (rustup only, no default toolchain)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-${UBUNTU_VERSION}-${TARGETARCH} \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-${UBUNTU_VERSION}-${TARGETARCH} \
    apt-get update && apt-get install -y --no-install-recommends \
    docker-compose \
    docker.io \
    gh \
    && rm -rf /var/lib/apt/lists/* \
    && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
        sh -s -- -y --no-modify-path --profile minimal --default-toolchain none && \
    echo 'source $HOME/.cargo/env' >> /etc/bash.bashrc \
    && mkdir -p -m 755 /opt/hostedtoolcache

# Set up environment
ENV AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache \
    UBUNTU_VERSION=${UBUNTU_VERSION}

WORKDIR /tmp
