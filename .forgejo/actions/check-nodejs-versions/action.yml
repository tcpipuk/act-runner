name: Check Node.js Versions
description: Find currently supported Node.js versions including LTS releases
author: Tom Foster

outputs:
  lts-versions:
    description: Space-separated list of Node.js LTS versions
    value: ${{ steps.check.outputs.lts }}
  live-versions:
    description: Space-separated list of all supported Node.js versions
    value: ${{ steps.check.outputs.all }}

runs:
  using: composite
  steps:
    - name: Check Node.js versions
      id: check
      shell: python
      run: |
        import json
        import urllib.request
        import os
        import sys

        def get_node_releases():
            """Fetch Node.js releases from official distribution index."""
            url = "https://nodejs.org/dist/index.json"
            with urllib.request.urlopen(url) as response:
                return json.loads(response.read().decode())

        def get_major_version(version_str):
            """Extract the major version number."""
            # Handle 'v18.1.0' format
            version = version_str.replace('v', '')
            return int(version.split('.')[0])

        # Main execution
        print("🔍 Fetching Node.js release index from nodejs.org...")
        print(f"::debug::Fetching Node.js release index")

        try:
            # Fetch Node.js release index
            releases = get_node_releases()
            print(f"✓ Fetched {len(releases)} releases")

            # Extract versions that are in Active or Maintenance LTS status
            lts_versions = []
            for release in releases:
                if release.get('lts') and release.get('lts') != False:
                    major = get_major_version(release['version'])
                    if major not in lts_versions:
                        lts_versions.append(major)

            # Get the two most recent stable versions (even-numbered only)
            all_versions = []
            for release in releases:
                major = get_major_version(release['version'])
                # Only include even-numbered versions (stable releases)
                if major % 2 == 0 and major not in all_versions:
                    all_versions.append(major)

            # Sort and take most recent versions
            lts_versions.sort()
            lts_versions = lts_versions[-2:] if len(lts_versions) >= 2 else lts_versions

            all_versions.sort()
            all_versions = all_versions[-2:] if len(all_versions) >= 2 else all_versions

            # Convert to space-separated strings
            lts_output = " ".join(str(v) for v in lts_versions)
            all_output = " ".join(str(v) for v in all_versions)

            print(f"🎯 Detected Node.js versions:")
            print(f"   LTS: {lts_output}")
            print(f"   Latest: {all_output}")

            print(f"::debug::All supported versions: {all_output}")
            print(f"::debug::LTS versions: {lts_output}")

            # Set outputs using GitHub Actions format
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"all={all_output}\n")
                f.write(f"lts={lts_output}\n")

            print(f"✓ Successfully set action outputs")

            if all_output:
                print(f"::notice::All supported Node.js versions: {all_output}")
            else:
                print(f"::warning::No supported Node.js versions found")

            if lts_output:
                print(f"::notice::LTS Node.js versions: {lts_output}")
            else:
                print(f"::warning::No LTS Node.js versions found")

        except Exception as e:
            print(f"::error::Failed to check Node.js versions: {e}")
            sys.exit(1)
