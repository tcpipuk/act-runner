name: Build Ubuntu Runner Images

on:
  push:
    paths:
      - "linux/ubuntu/**"
      - ".forgejo/workflows/build-ubuntu.yml"
  schedule:
    - cron: '0 4 * * *'  # Run daily at 4am UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: git.tomfos.tr
  IMAGE_NAME: tom/act-runner

jobs:
  prepare-build:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      k8s-version: ${{ steps.k8s.outputs.version }}
      rolling-ubuntu: ${{ steps.rolling.outputs.ubuntu }}
      rolling-python: ${{ steps.rolling.outputs.python }}
      node-lts: ${{ steps.node.outputs.lts }}
      node-latest: ${{ steps.node.outputs.latest }}
    steps:
      - name: Get stable K8s version
        id: k8s
        run: |
          K8S_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt | cut -d. -f1-2 | sed 's/v//')
          echo "version=${K8S_VERSION}" >> $GITHUB_OUTPUT
          echo "üéØ Kubernetes stable version: ${K8S_VERSION}"

      - name: Detect Ubuntu rolling version
        id: rolling
        run: |
          # Pull rolling image and get version info
          docker pull ubuntu:rolling
          UBUNTU_VERSION=$(docker run --rm ubuntu:rolling bash -c "grep VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '\"'")
          # Check what Python version is available in the repositories
          PYTHON_VERSION=$(docker run --rm ubuntu:rolling bash -c "
            apt-get update >/dev/null 2>&1
            apt-cache show python3 | grep '^Version:' | head -1 | cut -d' ' -f2 | cut -d. -f1-2
          ")

          echo "ubuntu=${UBUNTU_VERSION}" >> $GITHUB_OUTPUT
          echo "python=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "üîÑ Ubuntu rolling is currently ${UBUNTU_VERSION} with Python ${PYTHON_VERSION}"

      - name: Detect Node.js versions
        id: node
        run: |
          # Get Node.js release schedule from nodejs.org
          SCHEDULE_JSON=$(curl -sL https://nodejs.org/dist/index.json)

          # Extract versions in Active or Maintenance LTS status
          LTS_VERSIONS=$(echo "$SCHEDULE_JSON" | jq -r '
            [.[] | select(.lts != false) | .version[1:] | split(".")[0] | tonumber]
            | unique | sort | reverse | .[0:2] | join("+")
          ')

          # Get the two most recent stable versions
          # Node.js follows odd=development, even=stable convention
          LATEST_VERSIONS=$(echo "$SCHEDULE_JSON" | jq -r '
            [.[] | .version[1:] | split(".")[0] | tonumber | select(. % 2 == 0)]
            | unique | sort | reverse | .[0:2] | join("+")
          ')

          echo "lts=${LTS_VERSIONS}" >> $GITHUB_OUTPUT
          echo "latest=${LATEST_VERSIONS}" >> $GITHUB_OUTPUT
          echo "üì¶ Node.js LTS versions: ${LTS_VERSIONS}"
          echo "üì¶ Node.js latest versions: ${LATEST_VERSIONS}"

  build-base:
    name: Build Ubuntu ${{ matrix.ubuntu }} Base
    runs-on: ubuntu-latest
    needs: prepare-build
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ["22.04", "24.04"]
        include:
          # Add rolling release which tracks latest development version
          - ubuntu: "${{ needs.prepare-build.outputs.rolling-ubuntu }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate base tags
        id: base-tags
        run: |
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-base"
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi
          echo "tags=${BASE_TAG}" >> $GITHUB_OUTPUT
          echo "üì¶ Base image tag: ${BASE_TAG}"

      - name: Build and push base image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.base
          push: true
          tags: ${{ steps.base-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu }}
            K8S_VERSION=${{ needs.prepare-build.outputs.k8s-version }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-node:
    name: Build Ubuntu ${{ matrix.ubuntu }} Node ${{ matrix.node_versions }}
    runs-on: ubuntu-latest
    needs: [build-base, prepare-build]
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ["22.04", "24.04"]
        node_versions: ["${{ needs.prepare-build.outputs.node-lts }}", "${{ needs.prepare-build.outputs.node-latest }}"]
        include:
          # Add rolling release builds
          - ubuntu: "${{ needs.prepare-build.outputs.rolling-ubuntu }}"
            node_versions: "${{ needs.prepare-build.outputs.node-lts }}"
          - ubuntu: "${{ needs.prepare-build.outputs.rolling-ubuntu }}"
            node_versions: "${{ needs.prepare-build.outputs.node-latest }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate node tags
        id: node-tags
        run: |
          NODE_TAG=$(echo "${{ matrix.node_versions }}" | tr '+' '-')
          NODE_VERSIONS_SPACED=$(echo "${{ matrix.node_versions }}" | tr '+' ' ')
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-node${NODE_TAG}"

          # Add branch suffix if not on main
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi

          echo "tags=${BASE_TAG}" >> $GITHUB_OUTPUT
          echo "node_versions_spaced=${NODE_VERSIONS_SPACED}" >> $GITHUB_OUTPUT

          # Generate base image reference with branch suffix
          BASE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-base"
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_IMAGE="${BASE_IMAGE}-${{ github.ref_name }}"
          fi
          echo "base_image=${BASE_IMAGE}" >> $GITHUB_OUTPUT

          echo "üì¶ Node image tag: ${BASE_TAG}"
          echo "üîß Node versions: ${NODE_VERSIONS_SPACED}"
          echo "üèóÔ∏è Building from: ${BASE_IMAGE}"

      - name: Build and push node image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.node
          push: true
          tags: ${{ steps.node-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu }}
            BASE_IMAGE=${{ steps.node-tags.outputs.base_image }}
            NODE_VERSIONS=${{ steps.node-tags.outputs.node_versions_spaced }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-python:
    name: Build Ubuntu ${{ matrix.ubuntu }} Node ${{ matrix.node_versions }} Python ${{ matrix.python }}
    runs-on: ubuntu-latest
    needs: [build-node, prepare-build]
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ["22.04", "24.04"]
        node_versions: ["${{ needs.prepare-build.outputs.node-lts }}", "${{ needs.prepare-build.outputs.node-latest }}"]
        python: ["3.9", "3.11", "3.13"]
        include:
          # Native Python versions for each Ubuntu release
          - ubuntu: "22.04"
            node_versions: "${{ needs.prepare-build.outputs.node-lts }}"
            python: "3.10"
            use_native_python: "true"
            tag_alias: "ubuntu-lts"
          - ubuntu: "22.04"
            node_versions: "${{ needs.prepare-build.outputs.node-latest }}"
            python: "3.10"
            use_native_python: "true"
          - ubuntu: "24.04"
            node_versions: "${{ needs.prepare-build.outputs.node-lts }}"
            python: "3.12"
            use_native_python: "true"
          - ubuntu: "24.04"
            node_versions: "${{ needs.prepare-build.outputs.node-latest }}"
            python: "3.12"
            use_native_python: "true"
            tag_alias: "ubuntu-latest"
          # Rolling release - uses detected version and Python
          - ubuntu: "${{ needs.prepare-build.outputs.rolling-ubuntu }}"
            node_versions: "${{ needs.prepare-build.outputs.node-lts }}"
            python: "${{ needs.prepare-build.outputs.rolling-python }}"
            use_native_python: "true"
          - ubuntu: "${{ needs.prepare-build.outputs.rolling-ubuntu }}"
            node_versions: "${{ needs.prepare-build.outputs.node-latest }}"
            python: "${{ needs.prepare-build.outputs.rolling-python }}"
            use_native_python: "true"
            tag_alias: "ubuntu-rolling"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate python tags
        id: python-tags
        run: |
          NODE_TAG=$(echo "${{ matrix.node_versions }}" | tr '+' '-')
          NODE_VERSIONS_SPACED=$(echo "${{ matrix.node_versions }}" | tr '+' ' ')
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-node${NODE_TAG}-py${{ matrix.python }}"

          # Add branch suffix if not on main
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi

          TAGS="${BASE_TAG}"

          # Add alias tag if defined (also with branch suffix if needed)
          if [ -n "${{ matrix.tag_alias }}" ]; then
            ALIAS_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag_alias }}"
            if [ "${{ github.ref_name }}" != "main" ]; then
              ALIAS_TAG="${ALIAS_TAG}-${{ github.ref_name }}"
            fi
            TAGS="${TAGS},${ALIAS_TAG}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "node_versions_spaced=${NODE_VERSIONS_SPACED}" >> $GITHUB_OUTPUT

          # Generate node image reference with branch suffix
          NODE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-node${NODE_TAG}"
          if [ "${{ github.ref_name }}" != "main" ]; then
            NODE_IMAGE="${NODE_IMAGE}-${{ github.ref_name }}"
          fi
          echo "node_image=${NODE_IMAGE}" >> $GITHUB_OUTPUT

          echo "üì¶ Python image tags: ${TAGS}"
          echo "üêç Python version: ${{ matrix.python }}"
          echo "üîß Node versions: ${NODE_VERSIONS_SPACED}"
          echo "üèóÔ∏è Building from: ${NODE_IMAGE}"
          if [ -n "${{ matrix.tag_alias }}" ]; then
            echo "üè∑Ô∏è Tag alias: ${{ matrix.tag_alias }}"
          fi

      - name: Build and push python image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.python
          push: true
          tags: ${{ steps.python-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu }}
            NODE_IMAGE=${{ steps.python-tags.outputs.node_image }}
            NODE_VERSIONS=${{ steps.python-tags.outputs.node_versions_spaced }}
            PYTHON_VERSION=${{ matrix.python }}
            USE_NATIVE_PYTHON=${{ matrix.use_native_python }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  mirror-to-github:
    name: Mirror Images to GHCR
    runs-on: ubuntu-latest
    needs: build-python
    if: github.ref == 'refs/heads/main'  # Only mirror from main branch
    steps:
      - name: Install skopeo and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Discover and mirror image tags
        env:
          SOURCE_REGISTRY: git.tomfos.tr
          SOURCE_IMAGE: tom/act-runner
          DEST_REGISTRY: ghcr.io
          DEST_IMAGE: tcpipuk/act-runner
        run: |
          echo "üîç Discovering tags from source registry..."

          # Get all tags from source registry
          ALL_TAGS=$(skopeo list-tags docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE} | jq -r '.Tags[]' | sort)

          # Filter tags: exclude branch builds and other unwanted patterns
          TAGS_TO_MIRROR=()

          for TAG in $ALL_TAGS; do
            # Skip tags with branch suffixes (anything after a dash that isn't our standard pattern)
            if [[ "$TAG" =~ -(dev|main|update-.*|test.*|feature.*|fix.*)$ ]]; then
              echo "‚è≠Ô∏è  Skipping branch tag: $TAG"
              continue
            fi

            if [[ "$TAG" =~ ^(ubuntu-latest|ubuntu-lts|ubuntu-edge)$ ]] || \
               [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-base$ ]] || \
               [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-[0-9]+$ ]] || \
               [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-[0-9]+-py[0-9]+\.[0-9]+$ ]]; then
              TAGS_TO_MIRROR+=("$TAG")
              echo "‚úÖ Will mirror: $TAG"
            else
              echo "‚è≠Ô∏è  Skipping unknown pattern: $TAG"
            fi
          done

          # Mirror the filtered tags
          echo ""
          echo "üîÑ Starting mirror of ${#TAGS_TO_MIRROR[@]} multi-architecture images to GHCR..."
          FAILED=0
          SUCCEEDED=0

          for TAG in "${TAGS_TO_MIRROR[@]}"; do
            echo ""
            echo "üì¶ Mirroring: ${TAG}"

            if skopeo copy \
              --all \
              --retry-times 3 \
              --dest-precompute-digests \
              --src-no-creds \
              --dest-creds "tcpipuk:${{ secrets.GHCR_SYNC }}" \
              "docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE}:${TAG}" \
              "docker://${DEST_REGISTRY}/${DEST_IMAGE}:${TAG}"; then
              echo "‚úÖ Successfully mirrored: ${TAG}"
              SUCCEEDED=$((SUCCEEDED + 1))
            else
              echo "‚ùå Failed to mirror: ${TAG}"
              FAILED=$((FAILED + 1))
            fi
          done

          # Summary report
          echo ""
          echo "================================================"
          echo "üìä Mirror Summary:"
          echo "   Total discovered: $(echo "$ALL_TAGS" | wc -w) tags"
          echo "   Filtered for mirroring: ${#TAGS_TO_MIRROR[@]} tags"
          echo "   Successfully mirrored: ${SUCCEEDED}"
          echo "   Failed: ${FAILED}"
          echo "================================================"

          if [ $FAILED -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Some images failed to mirror"
            exit 1
          else
            echo "‚úÖ All images mirrored successfully!"
          fi

      - name: Verify critical tags
        run: |
          echo "üîç Verifying critical tags on GHCR..."

          # Check that our main alias tags exist
          CRITICAL_TAGS="ubuntu-latest ubuntu-lts ubuntu-edge"
          MISSING=0

          for TAG in $CRITICAL_TAGS; do
            if skopeo inspect --no-creds "docker://ghcr.io/tcpipuk/act-runner:${TAG}" > /dev/null 2>&1; then
              echo "‚úÖ Verified: ${TAG}"
            else
              echo "‚ùå Missing critical tag: ${TAG}"
              MISSING=$((MISSING + 1))
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "‚ùå Critical tags missing!"
            exit 1
          else
            echo "‚úÖ All critical tags verified!"
          fi

  update-readme:
    name: Update README if needed
    runs-on: ubuntu-latest
    needs: [build-python, prepare-build]
    if: github.ref == 'refs/heads/main'  # Only update from main branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.FORGEJO_TOKEN }}
          fetch-depth: 0

      - name: Generate Quick Start table
        id: quickstart
        run: |
          echo "üìù Generating Quick Start table..."

          # Get versions from prepare-build outputs
          ROLLING_VERSION="${{ needs.prepare-build.outputs.rolling-ubuntu }}"
          ROLLING_PYTHON="${{ needs.prepare-build.outputs.rolling-python }}"
          NODE_LTS="${{ needs.prepare-build.outputs.node-lts }}"
          NODE_LATEST="${{ needs.prepare-build.outputs.node-latest }}"

          # Convert Node versions from + to comma-space for display
          NODE_LTS_DISPLAY=$(echo "${NODE_LTS}" | tr '+' ', ')
          NODE_LATEST_DISPLAY=$(echo "${NODE_LATEST}" | tr '+' ', ')
          NODE_LTS_TAG=$(echo "${NODE_LTS}" | tr '+' '-')
          NODE_LATEST_TAG=$(echo "${NODE_LATEST}" | tr '+' '-')

          # Generate Quick Start table
          {
            echo "| Tag | Description | Points To |"
            echo "|-----|-------------|-----------|"
            echo "| **[\`ubuntu-rolling\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-rolling)** | Bleeding edge - Ubuntu ${ROLLING_VERSION}, Node.js ${NODE_LATEST_DISPLAY}, Python ${ROLLING_PYTHON} | [\`ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py${ROLLING_PYTHON}\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py${ROLLING_PYTHON}) |"
            echo "| **[\`ubuntu-latest\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-latest)** | Current stable - Ubuntu 24.04 LTS, Node.js ${NODE_LATEST_DISPLAY}, Python 3.12 | [\`ubuntu24.04-node${NODE_LATEST_TAG}-py3.12\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LATEST_TAG}-py3.12) |"
            echo "| **[\`ubuntu-lts\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-lts)** | Previous LTS - Ubuntu 22.04 LTS, Node.js ${NODE_LTS_DISPLAY}, Python 3.10 | [\`ubuntu22.04-node${NODE_LTS_TAG}-py3.10\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LTS_TAG}-py3.10) |"
            echo "| **[\`fedora-latest\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora-latest)** | Current stable - Fedora 42 with development tools | [\`fedora42-base\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora42-base) |"
          } > /tmp/quickstart.md

          echo "‚úÖ Generated Quick Start table:"
          echo "================================================"
          cat /tmp/quickstart.md
          echo "================================================"

      - name: Generate Available Images table
        id: images
        run: |
          echo "üìù Generating Available Images table..."

          # Get versions from prepare-build outputs
          ROLLING_VERSION="${{ needs.prepare-build.outputs.rolling-ubuntu }}"
          ROLLING_PYTHON="${{ needs.prepare-build.outputs.rolling-python }}"
          NODE_LTS="${{ needs.prepare-build.outputs.node-lts }}"
          NODE_LATEST="${{ needs.prepare-build.outputs.node-latest }}"

          # Convert Node versions for display and tags
          NODE_LTS_DISPLAY=$(echo "${NODE_LTS}" | tr '+' ', ')
          NODE_LATEST_DISPLAY=$(echo "${NODE_LATEST}" | tr '+' ', ')
          NODE_LTS_TAG=$(echo "${NODE_LTS}" | tr '+' '-')
          NODE_LATEST_TAG=$(echo "${NODE_LATEST}" | tr '+' '-')

          # Generate Available Images table
          {
            echo "| Ubuntu | Node.js | Python Versions Available |"
            echo "|--------|---------|---------------------------|"
            # Rolling release rows
            echo "| ${ROLLING_VERSION} | ${NODE_LATEST_DISPLAY} | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}), [3.9](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py3.9), [3.11](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py3.11), [3.13](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py3.13), [${ROLLING_PYTHON}](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py${ROLLING_PYTHON}) |"
            echo "| ${ROLLING_VERSION} | ${NODE_LTS_DISPLAY} | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LTS_TAG}), [3.9](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LTS_TAG}-py3.9), [3.11](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LTS_TAG}-py3.11), [3.13](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LTS_TAG}-py3.13), [${ROLLING_PYTHON}](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LTS_TAG}-py${ROLLING_PYTHON}) |"
            echo "| ${ROLLING_VERSION} | None | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-base) |"
            # 24.04 LTS rows
            echo "| 24.04 LTS | ${NODE_LATEST_DISPLAY} | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LATEST_TAG}), [3.9](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LATEST_TAG}-py3.9), [3.11](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LATEST_TAG}-py3.11), [3.13](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LATEST_TAG}-py3.13), [3.12](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LATEST_TAG}-py3.12) |"
            echo "| 24.04 LTS | ${NODE_LTS_DISPLAY} | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LTS_TAG}), [3.9](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LTS_TAG}-py3.9), [3.11](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LTS_TAG}-py3.11), [3.13](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LTS_TAG}-py3.13), [3.12](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-node${NODE_LTS_TAG}-py3.12) |"
            echo "| 24.04 LTS | None | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu24.04-base) |"
            # 22.04 LTS rows
            echo "| 22.04 LTS | ${NODE_LATEST_DISPLAY} | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LATEST_TAG}), [3.9](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LATEST_TAG}-py3.9), [3.11](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LATEST_TAG}-py3.11), [3.13](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LATEST_TAG}-py3.13), [3.10](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LATEST_TAG}-py3.10) |"
            echo "| 22.04 LTS | ${NODE_LTS_DISPLAY} | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LTS_TAG}), [3.9](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LTS_TAG}-py3.9), [3.11](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LTS_TAG}-py3.11), [3.13](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LTS_TAG}-py3.13), [3.10](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-node${NODE_LTS_TAG}-py3.10) |"
            echo "| 22.04 LTS | None | [None](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu22.04-base) |"
          } > /tmp/images.md

          echo "‚úÖ Generated Available Images table:"
          echo "================================================"
          cat /tmp/images.md
          echo "================================================"

      - name: Update README
        id: update
        run: |
          echo "üìù Updating README with new tables..."

          # Read current README
          CURRENT_README=$(cat README.md)

          # Extract and update Quick Start table
          QUICKSTART_CONTENT=$(cat /tmp/quickstart.md)
          NEW_README=$(echo "$CURRENT_README" | awk -v table="$QUICKSTART_CONTENT" '
            BEGIN { in_table = 0 }
            /^Use my convenience tags/ { print; getline; print; getline; print table; in_table = 1; next }
            in_table && /^\|/ { next }
            in_table && !/^\|/ { in_table = 0 }
            { print }
          ')

          # Extract and update Available Images table
          IMAGES_CONTENT=$(cat /tmp/images.md)
          NEW_README=$(echo "$NEW_README" | awk -v table="$IMAGES_CONTENT" '
            BEGIN { in_table = 0 }
            /^\*\*\[View all available tags/ { print; getline; print; getline; print table; in_table = 1; next }
            in_table && /^\|/ { next }
            in_table && !/^\|/ { in_table = 0 }
            { print }
          ')

          # Write updated README
          echo "$NEW_README" > README.md

          # Check if there are changes
          if git diff --quiet README.md; then
            echo "‚ùå No changes to README.md"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ README.md has been updated"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo ""
            echo "üìù Changes to README.md:"
            echo "================================================"
            git diff --color=always README.md | head -100
            echo "================================================"
          fi

      - name: Create Pull Request
        if: steps.update.outputs.changed == 'true'
        env:
          FORGEJO_TOKEN: ${{ secrets.FORGEJO_TOKEN }}
        run: |
          # Configure git
          git config user.name "forgejo-actions[bot]"
          git config user.email "actions@noreply.git.tomfos.tr"

          # Create or update branch
          BRANCH_NAME="update-readme-versions"
          git checkout -B $BRANCH_NAME

          # Commit changes
          git add README.md
          git commit -m "chore: update README with current versions

          Node.js LTS: ${{ needs.prepare-build.outputs.node-lts }}
          Node.js Latest: ${{ needs.prepare-build.outputs.node-latest }}
          Ubuntu Rolling: ${{ needs.prepare-build.outputs.rolling-ubuntu }}
          Python Rolling: ${{ needs.prepare-build.outputs.rolling-python }}"

          # Push changes
          git push -f origin $BRANCH_NAME

          # Check if PR already exists
          PR_EXISTS=$(curl -s -H "Authorization: token $FORGEJO_TOKEN" \
            "https://git.tomfos.tr/api/v1/repos/tom/act-runner/pulls?state=open&head=tom:$BRANCH_NAME" | \
            jq '. | length')

          if [ "$PR_EXISTS" -eq "0" ]; then
            # Create new PR
            curl -X POST -H "Authorization: token $FORGEJO_TOKEN" \
              -H "Content-Type: application/json" \
              "https://git.tomfos.tr/api/v1/repos/tom/act-runner/pulls" \
              -d "{
                \"title\": \"chore: update README with current versions\",
                \"head\": \"$BRANCH_NAME\",
                \"base\": \"main\",
                \"body\": \"### Automated README Update\\n\\nThis PR updates the README tables to reflect the current runtime versions:\\n\\n- **Node.js LTS**: ${{ needs.prepare-build.outputs.node-lts }}\\n- **Node.js Latest**: ${{ needs.prepare-build.outputs.node-latest }}\\n- **Ubuntu Rolling**: ${{ needs.prepare-build.outputs.rolling-ubuntu }}\\n- **Python Rolling**: ${{ needs.prepare-build.outputs.rolling-python }}\\n\\nThe tables are regenerated based on the actual images being built.\"
              }"
            echo "‚úÖ Created new PR for README updates"
          else
            echo "‚úÖ PR already exists, changes have been pushed"
          fi
