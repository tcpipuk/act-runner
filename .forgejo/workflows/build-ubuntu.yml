name: Build Ubuntu Runner Images

on:
  push:
    paths:
      - "linux/ubuntu/**"
      - ".forgejo/workflows/build-ubuntu.yml"
  schedule:
    - cron: '0 4 * * *'  # Run daily at 4am UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: git.tomfos.tr
  IMAGE_NAME: tom/act-runner

jobs:
  prepare-build:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      k8s-version: ${{ steps.k8s.outputs.version }}
      lts-ubuntu: ${{ steps.lts.outputs.ubuntu }}
      lts-python: ${{ steps.lts.outputs.python }}
      latest-ubuntu: ${{ steps.latest.outputs.ubuntu }}
      latest-python: ${{ steps.latest.outputs.python }}
      rolling-ubuntu: ${{ steps.rolling.outputs.ubuntu }}
      rolling-python: ${{ steps.rolling.outputs.python }}
      node-lts: ${{ steps.node.outputs.lts }}
      node-latest: ${{ steps.node.outputs.latest }}
    steps:
      - name: Get stable K8s version
        id: k8s
        run: |
          K8S_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt | cut -d. -f1-2 | sed 's/v//')
          echo "version=${K8S_VERSION}" >> $GITHUB_OUTPUT
          echo "🎯 Kubernetes stable version: ${K8S_VERSION}"

      - name: Detect Ubuntu LTS version
        id: lts
        run: |
          # Pull LTS image (22.04) and get version info
          docker pull ubuntu:22.04
          UBUNTU_VERSION=$(docker run --rm ubuntu:22.04 bash -c "grep VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '\"'")
          UBUNTU_CODENAME=$(docker run --rm ubuntu:22.04 bash -c "grep VERSION_CODENAME /etc/os-release | cut -d= -f2 | tr -d '\"'")
          # Check what Python version is available in the repositories
          PYTHON_VERSION=$(docker run --rm ubuntu:22.04 bash -c "
            apt-get update >/dev/null 2>&1
            apt-cache show python3 | grep '^Version:' | head -1 | cut -d' ' -f2 | cut -d. -f1-2
          ")

          echo "ubuntu=${UBUNTU_VERSION}" >> $GITHUB_OUTPUT
          echo "codename=${UBUNTU_CODENAME}" >> $GITHUB_OUTPUT
          echo "python=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Ubuntu LTS is ${UBUNTU_VERSION} (${UBUNTU_CODENAME}) with Python ${PYTHON_VERSION}"

      - name: Detect Ubuntu latest version
        id: latest
        run: |
          # Pull latest image and get version info
          docker pull ubuntu:latest
          UBUNTU_VERSION=$(docker run --rm ubuntu:latest bash -c "grep VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '\"'")
          UBUNTU_CODENAME=$(docker run --rm ubuntu:latest bash -c "grep VERSION_CODENAME /etc/os-release | cut -d= -f2 | tr -d '\"'")
          # Check what Python version is available in the repositories
          PYTHON_VERSION=$(docker run --rm ubuntu:latest bash -c "
            apt-get update >/dev/null 2>&1
            apt-cache show python3 | grep '^Version:' | head -1 | cut -d' ' -f2 | cut -d. -f1-2
          ")

          echo "ubuntu=${UBUNTU_VERSION}" >> $GITHUB_OUTPUT
          echo "codename=${UBUNTU_CODENAME}" >> $GITHUB_OUTPUT
          echo "python=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Ubuntu latest is currently ${UBUNTU_VERSION} LTS (${UBUNTU_CODENAME}) with Python ${PYTHON_VERSION}"

      - name: Detect Ubuntu rolling version
        id: rolling
        run: |
          # Pull rolling image and get version info
          docker pull ubuntu:rolling
          UBUNTU_VERSION=$(docker run --rm ubuntu:rolling bash -c "grep VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '\"'")
          UBUNTU_CODENAME=$(docker run --rm ubuntu:rolling bash -c "grep VERSION_CODENAME /etc/os-release | cut -d= -f2 | tr -d '\"'")
          # Check what Python version is available in the repositories
          PYTHON_VERSION=$(docker run --rm ubuntu:rolling bash -c "
            apt-get update >/dev/null 2>&1
            apt-cache show python3 | grep '^Version:' | head -1 | cut -d' ' -f2 | cut -d. -f1-2
          ")

          echo "ubuntu=${UBUNTU_VERSION}" >> $GITHUB_OUTPUT
          echo "codename=${UBUNTU_CODENAME}" >> $GITHUB_OUTPUT
          echo "python=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "🔄 Ubuntu rolling is currently ${UBUNTU_VERSION} (${UBUNTU_CODENAME}) with Python ${PYTHON_VERSION}"

      - name: Detect Node.js versions
        id: node
        run: |
          # Get Node.js release schedule from nodejs.org
          SCHEDULE_JSON=$(curl -sL https://nodejs.org/dist/index.json)

          # Extract versions in Active or Maintenance LTS status
          LTS_VERSIONS=$(echo "$SCHEDULE_JSON" | jq -r '
            [.[] | select(.lts != false) | .version[1:] | split(".")[0] | tonumber]
            | unique | sort | reverse | .[0:2] | join("+")
          ')

          # Get the two most recent stable versions
          # Node.js follows odd=development, even=stable convention
          LATEST_VERSIONS=$(echo "$SCHEDULE_JSON" | jq -r '
            [.[] | .version[1:] | split(".")[0] | tonumber | select(. % 2 == 0)]
            | unique | sort | reverse | .[0:2] | join("+")
          ')

          echo "lts=${LTS_VERSIONS}" >> $GITHUB_OUTPUT
          echo "latest=${LATEST_VERSIONS}" >> $GITHUB_OUTPUT
          echo "📦 Node.js LTS versions: ${LTS_VERSIONS}"
          echo "📦 Node.js latest versions: ${LATEST_VERSIONS}"

  build-base:
    name: Build Ubuntu ${{ matrix.ubuntu == 'lts' && 'LTS' || matrix.ubuntu == 'latest' && 'Latest' || matrix.ubuntu == 'rolling' && 'Rolling' || matrix.ubuntu }} Node ${{ matrix.node_versions == 'lts' && 'LTS' || matrix.node_versions == 'latest' && 'Latest' || matrix.node_versions }}
    runs-on: ubuntu-latest
    needs: prepare-build
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu: "lts"
            node_versions: "lts"
          - ubuntu: "latest"
            node_versions: "latest"
          - ubuntu: "rolling"
            node_versions: "latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate node tags
        id: node-tags
        env:
          NODE_LTS: ${{ needs.prepare-build.outputs.node-lts }}
          NODE_LATEST: ${{ needs.prepare-build.outputs.node-latest }}
        run: |
          # Resolve the actual Ubuntu version
          if [ "${{ matrix.ubuntu }}" = "lts" ]; then
            UBUNTU_VERSION="${{ needs.prepare-build.outputs.lts-ubuntu }}"
          elif [ "${{ matrix.ubuntu }}" = "latest" ]; then
            UBUNTU_VERSION="${{ needs.prepare-build.outputs.latest-ubuntu }}"
          elif [ "${{ matrix.ubuntu }}" = "rolling" ]; then
            UBUNTU_VERSION="${{ needs.prepare-build.outputs.rolling-ubuntu }}"
          else
            UBUNTU_VERSION="${{ matrix.ubuntu }}"
          fi
          echo "ubuntu-version=${UBUNTU_VERSION}" >> $GITHUB_OUTPUT

          # Select actual versions based on the label
          if [ "${{ matrix.node_versions }}" = "lts" ]; then
            NODE_VERSIONS="${NODE_LTS}"
          else
            NODE_VERSIONS="${NODE_LATEST}"
          fi

          NODE_TAG=$(echo "${NODE_VERSIONS}" | tr '+' '-')
          NODE_VERSIONS_SPACED=$(echo "${NODE_VERSIONS}" | tr '+' ' ')
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${UBUNTU_VERSION}-node${NODE_TAG}"

          # Add branch suffix if not on main
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi

          echo "tags=${BASE_TAG}" >> $GITHUB_OUTPUT
          echo "node_versions_spaced=${NODE_VERSIONS_SPACED}" >> $GITHUB_OUTPUT

          echo "📦 Node image tag: ${BASE_TAG}"
          echo "🔧 Node versions: ${NODE_VERSIONS_SPACED}"

      - name: Build and push node image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.base
          push: true
          tags: ${{ steps.node-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ steps.node-tags.outputs.ubuntu-version }}
            NODE_VERSIONS=${{ steps.node-tags.outputs.node_versions_spaced }}
            K8S_VERSION=${{ needs.prepare-build.outputs.k8s-version }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x


  build-python:
    name: Build Ubuntu ${{ matrix.ubuntu == 'lts' && 'LTS' || matrix.ubuntu == 'latest' && 'Latest' || matrix.ubuntu == 'rolling' && 'Rolling' || matrix.ubuntu }} Node ${{ matrix.node_versions == 'lts' && 'LTS' || matrix.node_versions == 'latest' && 'Latest' || matrix.node_versions }} Python ${{ matrix.python == 'native' && 'Native' || matrix.python }}
    runs-on: ubuntu-latest
    needs: [build-base, prepare-build]
    strategy:
      fail-fast: false
      matrix:
        include:
          # LTS Ubuntu with LTS Node
          - ubuntu: "lts"
            node_versions: "lts"
            python: "3.13"
          - ubuntu: "lts"
            node_versions: "lts"
            python: "native"
          # Latest Ubuntu with Latest Node
          - ubuntu: "latest"
            node_versions: "latest"
            python: "3.13"
          - ubuntu: "latest"
            node_versions: "latest"
            python: "native"
          # Rolling Ubuntu with Latest Node (native Python only)
          - ubuntu: "rolling"
            node_versions: "latest"
            python: "native"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate python tags
        id: python-tags
        env:
          NODE_LTS: ${{ needs.prepare-build.outputs.node-lts }}
          NODE_LATEST: ${{ needs.prepare-build.outputs.node-latest }}
        run: |
          # Resolve the actual Ubuntu version
          if [ "${{ matrix.ubuntu }}" = "lts" ]; then
            UBUNTU_VERSION="${{ needs.prepare-build.outputs.lts-ubuntu }}"
          elif [ "${{ matrix.ubuntu }}" = "latest" ]; then
            UBUNTU_VERSION="${{ needs.prepare-build.outputs.latest-ubuntu }}"
          elif [ "${{ matrix.ubuntu }}" = "rolling" ]; then
            UBUNTU_VERSION="${{ needs.prepare-build.outputs.rolling-ubuntu }}"
          else
            UBUNTU_VERSION="${{ matrix.ubuntu }}"
          fi
          echo "ubuntu-version=${UBUNTU_VERSION}" >> $GITHUB_OUTPUT

          # Resolve the actual Python version
          if [ "${{ matrix.python }}" = "native" ]; then
            # Determine native Python based on Ubuntu version
            if [ "${{ matrix.ubuntu }}" = "lts" ]; then
              PYTHON_VERSION="${{ needs.prepare-build.outputs.lts-python }}"
            elif [ "${{ matrix.ubuntu }}" = "latest" ]; then
              PYTHON_VERSION="${{ needs.prepare-build.outputs.latest-python }}"
            elif [ "${{ matrix.ubuntu }}" = "rolling" ]; then
              PYTHON_VERSION="${{ needs.prepare-build.outputs.rolling-python }}"
            fi
            USE_NATIVE_PYTHON="true"
          else
            PYTHON_VERSION="${{ matrix.python }}"
            USE_NATIVE_PYTHON=""
          fi
          echo "python-version=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "use-native-python=${USE_NATIVE_PYTHON}" >> $GITHUB_OUTPUT

          # Select actual Node versions based on the label
          if [ "${{ matrix.node_versions }}" = "lts" ]; then
            NODE_VERSIONS="${NODE_LTS}"
          else
            NODE_VERSIONS="${NODE_LATEST}"
          fi

          NODE_TAG=$(echo "${NODE_VERSIONS}" | tr '+' '-')
          NODE_VERSIONS_SPACED=$(echo "${NODE_VERSIONS}" | tr '+' ' ')
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${UBUNTU_VERSION}-node${NODE_TAG}-py${PYTHON_VERSION}"

          # Add branch suffix if not on main
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi

          TAGS="${BASE_TAG}"

          # Auto-generate alias tags based on combination
          # ubuntu-lts: lts + lts node + native python
          # ubuntu-latest: latest + latest node + native python
          # ubuntu-rolling: rolling + latest node + native python
          if [ "${{ matrix.ubuntu }}" = "lts" ] && [ "${{ matrix.node_versions }}" = "lts" ] && [ "${{ matrix.python }}" = "native" ]; then
            ALIAS_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu-lts"
            if [ "${{ github.ref_name }}" != "main" ]; then
              ALIAS_TAG="${ALIAS_TAG}-${{ github.ref_name }}"
            fi
            TAGS="${TAGS},${ALIAS_TAG}"
          elif [ "${{ matrix.ubuntu }}" = "latest" ] && [ "${{ matrix.node_versions }}" = "latest" ] && [ "${{ matrix.python }}" = "native" ]; then
            ALIAS_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu-latest"
            if [ "${{ github.ref_name }}" != "main" ]; then
              ALIAS_TAG="${ALIAS_TAG}-${{ github.ref_name }}"
            fi
            TAGS="${TAGS},${ALIAS_TAG}"
          elif [ "${{ matrix.ubuntu }}" = "rolling" ] && [ "${{ matrix.node_versions }}" = "latest" ] && [ "${{ matrix.python }}" = "native" ]; then
            ALIAS_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu-rolling"
            if [ "${{ github.ref_name }}" != "main" ]; then
              ALIAS_TAG="${ALIAS_TAG}-${{ github.ref_name }}"
            fi
            TAGS="${TAGS},${ALIAS_TAG}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "node_versions_spaced=${NODE_VERSIONS_SPACED}" >> $GITHUB_OUTPUT

          # Generate base image reference with branch suffix (now includes Node.js)
          BASE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${UBUNTU_VERSION}-node${NODE_TAG}"
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_IMAGE="${BASE_IMAGE}-${{ github.ref_name }}"
          fi
          echo "base_image=${BASE_IMAGE}" >> $GITHUB_OUTPUT

          echo "📦 Python image tags: ${TAGS}"
          echo "🐍 Python version: ${PYTHON_VERSION}"
          echo "🔧 Node versions: ${NODE_VERSIONS_SPACED}"
          echo "🏗️ Building from: ${BASE_IMAGE}"

      - name: Build and push python image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.python
          push: true
          tags: ${{ steps.python-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ steps.python-tags.outputs.ubuntu-version }}
            BASE_IMAGE=${{ steps.python-tags.outputs.base_image }}
            NODE_VERSIONS=${{ steps.python-tags.outputs.node_versions_spaced }}
            PYTHON_VERSION=${{ steps.python-tags.outputs.python-version }}
            USE_NATIVE_PYTHON=${{ steps.python-tags.outputs.use-native-python }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  mirror-to-github:
    name: Mirror Images to GHCR
    runs-on: ubuntu-latest
    needs: build-python
    if: github.ref_name == 'main'
    steps:
      - name: Install skopeo and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Discover and mirror image tags
        env:
          SOURCE_REGISTRY: git.tomfos.tr
          SOURCE_IMAGE: tom/act-runner
          DEST_REGISTRY: ghcr.io
          DEST_IMAGE: tcpipuk/act-runner
        run: |
          echo "🔍 Discovering tags from source registry..."

          # Get all tags from source registry
          ALL_TAGS=$(skopeo list-tags docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE} | jq -r '.Tags[]' | sort)

          # Filter tags: exclude branch builds and other unwanted patterns
          # Separate tags by category for proper ordering
          NODE_TAGS=()
          PYTHON_TAGS=()
          ALIAS_TAGS=()

          for TAG in $ALL_TAGS; do
            # Skip tags with branch suffixes (anything after a dash that isn't our standard pattern)
            if [[ "$TAG" =~ -(dev|main|update-.*|test.*|feature.*|fix.*)$ ]]; then
              echo "⏭️  Skipping branch tag: $TAG"
              continue
            fi

            # Categorize tags for proper ordering
            # No longer have -base tags, they're now node tags
            elif [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-[0-9]+$ ]]; then
              NODE_TAGS+=("$TAG")
            elif [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-[0-9]+-py[0-9]+\.[0-9]+$ ]]; then
              PYTHON_TAGS+=("$TAG")
            elif [[ "$TAG" =~ ^(ubuntu-latest|ubuntu-lts|ubuntu-rolling)$ ]]; then
              ALIAS_TAGS+=("$TAG")
            else
              echo "⏭️  Skipping unknown pattern: $TAG"
              continue
            fi
          done

          # Sort each category (except aliases which have a specific order)
          IFS=$'\n' NODE_TAGS=($(sort <<<"${NODE_TAGS[*]}")); unset IFS
          IFS=$'\n' PYTHON_TAGS=($(sort <<<"${PYTHON_TAGS[*]}")); unset IFS

          # Sort alias tags in specific order: lts, latest, rolling
          SORTED_ALIAS_TAGS=()
          for ALIAS in "ubuntu-lts" "ubuntu-latest" "ubuntu-rolling"; do
            for TAG in "${ALIAS_TAGS[@]}"; do
              if [ "$TAG" = "$ALIAS" ]; then
                SORTED_ALIAS_TAGS+=("$TAG")
                break
              fi
            done
          done
          ALIAS_TAGS=("${SORTED_ALIAS_TAGS[@]}")

          # Combine in the desired order: node, python, then aliases
          TAGS_TO_MIRROR=()

          # Add node tags first
          for TAG in "${NODE_TAGS[@]}"; do
            if [ -n "$TAG" ]; then
              TAGS_TO_MIRROR+=("$TAG")
              echo "✅ Will mirror: $TAG"
            fi
          done

          # Then python tags
          for TAG in "${PYTHON_TAGS[@]}"; do
            if [ -n "$TAG" ]; then
              TAGS_TO_MIRROR+=("$TAG")
              echo "✅ Will mirror: $TAG"
            fi
          done

          # Finally alias tags
          for TAG in "${ALIAS_TAGS[@]}"; do
            if [ -n "$TAG" ]; then
              TAGS_TO_MIRROR+=("$TAG")
              echo "✅ Will mirror: $TAG"
            fi
          done

          # Mirror the filtered tags
          echo ""
          echo "🔄 Starting mirror of ${#TAGS_TO_MIRROR[@]} multi-architecture images to GHCR..."
          FAILED=0
          SUCCEEDED=0

          for TAG in "${TAGS_TO_MIRROR[@]}"; do
            echo ""
            echo "📦 Mirroring: ${TAG}"

            if skopeo copy \
              --quiet \
              --all \
              --retry-times 3 \
              --dest-precompute-digests \
              --src-no-creds \
              --dest-creds "tcpipuk:${{ secrets.GHCR_SYNC }}" \
              "docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE}:${TAG}" \
              "docker://${DEST_REGISTRY}/${DEST_IMAGE}:${TAG}"; then
              echo "✅ Successfully mirrored: ${TAG}"
              SUCCEEDED=$((SUCCEEDED + 1))
            else
              echo "❌ Failed to mirror: ${TAG}"
              FAILED=$((FAILED + 1))
            fi
          done

          # Summary report
          echo ""
          echo "================================================"
          echo "📊 Mirror Summary:"
          echo "   Total discovered: $(echo "$ALL_TAGS" | wc -w) tags"
          echo "   Filtered for mirroring: ${#TAGS_TO_MIRROR[@]} tags"
          echo "   Successfully mirrored: ${SUCCEEDED}"
          echo "   Failed: ${FAILED}"
          echo "================================================"

          if [ $FAILED -gt 0 ]; then
            echo "⚠️ Warning: Some images failed to mirror"
            exit 1
          else
            echo "✅ All images mirrored successfully!"
          fi

      - name: Verify critical tags
        run: |
          echo "🔍 Verifying critical tags on GHCR..."

          # Check that our main alias tags exist
          CRITICAL_TAGS="ubuntu-latest ubuntu-lts ubuntu-rolling"
          MISSING=0

          for TAG in $CRITICAL_TAGS; do
            if skopeo inspect --no-creds "docker://ghcr.io/tcpipuk/act-runner:${TAG}" > /dev/null 2>&1; then
              echo "✅ Verified: ${TAG}"
            else
              echo "❌ Missing critical tag: ${TAG}"
              MISSING=$((MISSING + 1))
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "❌ Critical tags missing!"
            exit 1
          else
            echo "✅ All critical tags verified!"
          fi

  update-readme:
    name: Update README if needed
    runs-on: ubuntu-latest
    needs: [build-python, prepare-build]
    if: github.ref_name == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.FORGEJO_TOKEN }}
          fetch-depth: 0

      - name: Generate Ubuntu images table
        id: ubuntu-table
        run: |
          echo "📝 Generating Ubuntu images table..."

          # Define all Python versions we support (matches the matrix in build-python)
          PYTHON_VERSIONS="3.13"

          # Get versions from prepare-build outputs
          LTS_VERSION="${{ needs.prepare-build.outputs.lts-ubuntu }}"
          LTS_PYTHON="${{ needs.prepare-build.outputs.lts-python }}"
          LATEST_VERSION="${{ needs.prepare-build.outputs.latest-ubuntu }}"
          LATEST_PYTHON="${{ needs.prepare-build.outputs.latest-python }}"
          ROLLING_VERSION="${{ needs.prepare-build.outputs.rolling-ubuntu }}"
          ROLLING_PYTHON="${{ needs.prepare-build.outputs.rolling-python }}"
          NODE_LTS="${{ needs.prepare-build.outputs.node-lts }}"
          NODE_LATEST="${{ needs.prepare-build.outputs.node-latest }}"

          # Convert Node versions from + to slash for display
          NODE_LTS_DISPLAY=$(echo "${NODE_LTS}" | tr '+' '/')
          NODE_LATEST_DISPLAY=$(echo "${NODE_LATEST}" | tr '+' '/')
          NODE_LTS_TAG=$(echo "${NODE_LTS}" | tr '+' '-')
          NODE_LATEST_TAG=$(echo "${NODE_LATEST}" | tr '+' '-')

          # Generate simplified Ubuntu images table matching our new matrix
          {
            echo "| Ubuntu | Node.js | Python Versions Available |"
            echo "|--------|---------|---------------------------|"
            echo "| **[\`ubuntu-rolling\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-rolling)** - Bleeding edge | ${NODE_LATEST_DISPLAY} | [\`ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py${ROLLING_PYTHON}\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py${ROLLING_PYTHON}) |"
            echo "| **[\`ubuntu-latest\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-latest)** - Current stable | ${NODE_LATEST_DISPLAY} | [\`ubuntu${LATEST_VERSION}-node${NODE_LATEST_TAG}-py${LATEST_PYTHON}\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LATEST_VERSION}-node${NODE_LATEST_TAG}-py${LATEST_PYTHON}) |"
            echo "| **[\`ubuntu-lts\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-lts)** - Previous LTS | ${NODE_LTS_DISPLAY} | [\`ubuntu${LTS_VERSION}-node${NODE_LTS_TAG}-py${LTS_PYTHON}\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LTS_VERSION}-node${NODE_LTS_TAG}-py${LTS_PYTHON}) |"
            echo "|  |  |  |"

            # Simplified matrix: each Ubuntu version gets exactly one Node.js version
            echo "| ${ROLLING_VERSION} | ${NODE_LATEST_DISPLAY} | [\`None\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}), [**${ROLLING_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${ROLLING_VERSION}-node${NODE_LATEST_TAG}-py${ROLLING_PYTHON}) |"
            echo "| ${LATEST_VERSION} LTS | ${NODE_LATEST_DISPLAY} | [\`None\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LATEST_VERSION}-node${NODE_LATEST_TAG}), [${PYTHON_VERSIONS}](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LATEST_VERSION}-node${NODE_LATEST_TAG}-py${PYTHON_VERSIONS}), [**${LATEST_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LATEST_VERSION}-node${NODE_LATEST_TAG}-py${LATEST_PYTHON}) |"
            echo "| ${LTS_VERSION} LTS | ${NODE_LTS_DISPLAY} | [\`None\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LTS_VERSION}-node${NODE_LTS_TAG}), [${PYTHON_VERSIONS}](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LTS_VERSION}-node${NODE_LTS_TAG}-py${PYTHON_VERSIONS}), [**${LTS_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${LTS_VERSION}-node${NODE_LTS_TAG}-py${LTS_PYTHON}) |"
          } > /tmp/ubuntu-images.md

          echo "✅ Generated Ubuntu images table:"
          echo "================================================"
          cat /tmp/ubuntu-images.md
          echo "================================================"

      - name: Update README
        id: update
        run: |
          echo "📝 Updating README with Ubuntu images table..."

          # Read current README
          CURRENT_README=$(cat README.md)

          # Extract and update Ubuntu images table
          UBUNTU_CONTENT=$(cat /tmp/ubuntu-images.md)
          NEW_README=$(echo "$CURRENT_README" | awk -v table="$UBUNTU_CONTENT" '
            BEGIN { in_table = 0 }
            /^## Ubuntu images/ { print; getline; print; getline; print; getline; print; print table; in_table = 1; next }
            in_table && /^\|/ { next }
            in_table && !/^\|/ { in_table = 0 }
            { print }
          ')

          # Write updated README
          echo "$NEW_README" > README.md

          # Check if there are changes
          if git diff --quiet README.md; then
            echo "❌ No changes to README.md"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ README.md has been updated"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo ""
            echo "📝 Changes to README.md:"
            echo "================================================"
            git diff --color=always README.md | head -100
            echo "================================================"
          fi

      - name: Create Pull Request
        if: steps.update.outputs.changed == 'true'
        env:
          FORGEJO_TOKEN: ${{ secrets.FORGEJO_TOKEN }}
        run: |
          # Configure git
          git config user.name "forgejo-actions[bot]"
          git config user.email "actions@noreply.git.tomfos.tr"

          # Create or update branch
          BRANCH_NAME="update-ubuntu-versions"
          git checkout -B $BRANCH_NAME

          # Commit changes
          git add README.md
          git commit -m "chore: update Ubuntu images in README

          Node.js LTS: ${{ needs.prepare-build.outputs.node-lts }}
          Node.js Latest: ${{ needs.prepare-build.outputs.node-latest }}
          Ubuntu Rolling: ${{ needs.prepare-build.outputs.rolling-ubuntu }}
          Python Rolling: ${{ needs.prepare-build.outputs.rolling-python }}"

          # Push changes
          git push -f origin $BRANCH_NAME

          # Check if PR already exists
          PR_EXISTS=$(curl -s -H "Authorization: token $FORGEJO_TOKEN" \
            "https://git.tomfos.tr/api/v1/repos/tom/act-runner/pulls?state=open&head=tom:$BRANCH_NAME" | \
            jq '. | length')

          if [ "$PR_EXISTS" -eq "0" ]; then
            # Create new PR
            curl -X POST -H "Authorization: token $FORGEJO_TOKEN" \
              -H "Content-Type: application/json" \
              "https://git.tomfos.tr/api/v1/repos/tom/act-runner/pulls" \
              -d "{
                \"title\": \"chore: update Ubuntu images in README\",
                \"head\": \"$BRANCH_NAME\",
                \"base\": \"main\",
                \"body\": \"### Automated Ubuntu Images Update\\n\\nThis PR updates the Ubuntu images table to reflect the current runtime versions:\\n\\n- **Node.js LTS**: ${{ needs.prepare-build.outputs.node-lts }}\\n- **Node.js Latest**: ${{ needs.prepare-build.outputs.node-latest }}\\n- **Ubuntu Rolling**: ${{ needs.prepare-build.outputs.rolling-ubuntu }}\\n- **Python Rolling**: ${{ needs.prepare-build.outputs.rolling-python }}\\n\\nThe Ubuntu images table is regenerated based on the actual images being built.\"
              }"
            echo "✅ Created new PR for README updates"
          else
            echo "✅ PR already exists, changes have been pushed"
          fi
