name: Build Ubuntu Runner Images

on:
  push:
    paths:
      - "linux/ubuntu/**"
      - ".forgejo/workflows/build-ubuntu.yml"
  schedule:
    - cron: '0 4 * * *'  # Run daily at 4am UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: git.tomfos.tr
  IMAGE_NAME: tom/act-runner

jobs:
  prepare-build:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      k8s-version: ${{ steps.k8s.outputs.version }}
    steps:
      - name: Get stable K8s version
        id: k8s
        run: |
          K8S_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt | cut -d. -f1-2 | sed 's/v//')
          echo "version=${K8S_VERSION}" >> $GITHUB_OUTPUT
          echo "üéØ Kubernetes stable version: ${K8S_VERSION}"

  build-base:
    name: Build Ubuntu ${{ matrix.ubuntu }} Base
    runs-on: ubuntu-latest
    needs: prepare-build
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ["22.04", "24.04", "25.04"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate base tags
        id: base-tags
        run: |
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-base"
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi
          echo "tags=${BASE_TAG}" >> $GITHUB_OUTPUT
          echo "üì¶ Base image tag: ${BASE_TAG}"

      - name: Build and push base image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.base
          push: true
          tags: ${{ steps.base-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu }}
            K8S_VERSION=${{ needs.prepare-build.outputs.k8s-version }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-node:
    name: Build Ubuntu ${{ matrix.ubuntu }} Node ${{ matrix.node_versions }}
    runs-on: ubuntu-latest
    needs: build-base
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ["22.04", "24.04", "25.04"]
        node_versions: ["20+22", "22+24"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate node tags
        id: node-tags
        run: |
          NODE_TAG=$(echo "${{ matrix.node_versions }}" | tr '+' '-')
          NODE_VERSIONS_SPACED=$(echo "${{ matrix.node_versions }}" | tr '+' ' ')
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-node${NODE_TAG}"

          # Add branch suffix if not on main
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi

          echo "tags=${BASE_TAG}" >> $GITHUB_OUTPUT
          echo "node_versions_spaced=${NODE_VERSIONS_SPACED}" >> $GITHUB_OUTPUT

          # Generate base image reference with branch suffix
          BASE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-base"
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_IMAGE="${BASE_IMAGE}-${{ github.ref_name }}"
          fi
          echo "base_image=${BASE_IMAGE}" >> $GITHUB_OUTPUT

          echo "üì¶ Node image tag: ${BASE_TAG}"
          echo "üîß Node versions: ${NODE_VERSIONS_SPACED}"
          echo "üèóÔ∏è Building from: ${BASE_IMAGE}"

      - name: Build and push node image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.node
          push: true
          tags: ${{ steps.node-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu }}
            BASE_IMAGE=${{ steps.node-tags.outputs.base_image }}
            NODE_VERSIONS=${{ steps.node-tags.outputs.node_versions_spaced }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-python:
    name: Build Ubuntu ${{ matrix.ubuntu }} Node ${{ matrix.node_versions }} Python ${{ matrix.python }}
    runs-on: ubuntu-latest
    needs: build-node
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ["22.04", "24.04"]
        node_versions: ["20+22", "22+24"]
        python: ["3.9", "3.11", "3.13"]
        exclude:
          # Exclude base combinations that will be replaced with aliased versions
          - ubuntu: "24.04"
            node_versions: "20+22"
            python: "3.13"
          - ubuntu: "22.04"
            node_versions: "20+22"
            python: "3.13"
        include:
          # Add Ubuntu 25.04 builds separately (no deadsnakes, only system Python)
          - ubuntu: "25.04"
            node_versions: "20+22"
            python: "3.13"
          - ubuntu: "25.04"
            node_versions: "22+24"
            python: "3.13"
            tag_alias: "ubuntu-edge"
          # Add tag aliases for specific versions
          - ubuntu: "24.04"
            node_versions: "20+22"
            python: "3.13"
            tag_alias: "ubuntu-latest"
          - ubuntu: "22.04"
            node_versions: "20+22"
            python: "3.13"
            tag_alias: "ubuntu-lts"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate python tags
        id: python-tags
        run: |
          NODE_TAG=$(echo "${{ matrix.node_versions }}" | tr '+' '-')
          NODE_VERSIONS_SPACED=$(echo "${{ matrix.node_versions }}" | tr '+' ' ')
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-node${NODE_TAG}-py${{ matrix.python }}"

          # Add branch suffix if not on main
          if [ "${{ github.ref_name }}" != "main" ]; then
            BASE_TAG="${BASE_TAG}-${{ github.ref_name }}"
          fi

          TAGS="${BASE_TAG}"

          # Add alias tag if defined (also with branch suffix if needed)
          if [ -n "${{ matrix.tag_alias }}" ]; then
            ALIAS_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag_alias }}"
            if [ "${{ github.ref_name }}" != "main" ]; then
              ALIAS_TAG="${ALIAS_TAG}-${{ github.ref_name }}"
            fi
            TAGS="${TAGS},${ALIAS_TAG}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "node_versions_spaced=${NODE_VERSIONS_SPACED}" >> $GITHUB_OUTPUT

          # Generate node image reference with branch suffix
          NODE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu${{ matrix.ubuntu }}-node${NODE_TAG}"
          if [ "${{ github.ref_name }}" != "main" ]; then
            NODE_IMAGE="${NODE_IMAGE}-${{ github.ref_name }}"
          fi
          echo "node_image=${NODE_IMAGE}" >> $GITHUB_OUTPUT

          echo "üì¶ Python image tags: ${TAGS}"
          echo "üêç Python version: ${{ matrix.python }}"
          echo "üîß Node versions: ${NODE_VERSIONS_SPACED}"
          echo "üèóÔ∏è Building from: ${NODE_IMAGE}"
          if [ -n "${{ matrix.tag_alias }}" ]; then
            echo "üè∑Ô∏è Tag alias: ${{ matrix.tag_alias }}"
          fi

      - name: Build and push python image
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu
          file: ./linux/ubuntu/Dockerfile.python
          push: true
          tags: ${{ steps.python-tags.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu }}
            NODE_IMAGE=${{ steps.python-tags.outputs.node_image }}
            NODE_VERSIONS=${{ steps.python-tags.outputs.node_versions_spaced }}
            PYTHON_VERSION=${{ matrix.python }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  mirror-to-github:
    name: Mirror Images to GHCR
    runs-on: ubuntu-latest
    needs: build-python
    if: github.ref == 'refs/heads/main'  # Only mirror from main branch
    steps:
      - name: Install skopeo and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Discover and mirror image tags
        env:
          SOURCE_REGISTRY: git.tomfos.tr
          SOURCE_IMAGE: tom/act-runner
          DEST_REGISTRY: ghcr.io
          DEST_IMAGE: tcpipuk/act-runner
        run: |
          echo "üîç Discovering tags from source registry..."

          # Get all tags from source registry
          ALL_TAGS=$(skopeo list-tags docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE} | jq -r '.Tags[]' | sort)

          # Filter tags: exclude branch builds and other unwanted patterns
          TAGS_TO_MIRROR=()

          for TAG in $ALL_TAGS; do
            # Skip tags with branch suffixes (anything after a dash that isn't our standard pattern)
            if [[ "$TAG" =~ -(dev|main|update-.*|test.*|feature.*|fix.*)$ ]]; then
              echo "‚è≠Ô∏è  Skipping branch tag: $TAG"
              continue
            fi

            if [[ "$TAG" =~ ^(ubuntu-latest|ubuntu-lts|ubuntu-edge)$ ]] || \
               [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-base$ ]] || \
               [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-[0-9]+$ ]] || \
               [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-[0-9]+-py[0-9]+\.[0-9]+$ ]]; then
              TAGS_TO_MIRROR+=("$TAG")
              echo "‚úÖ Will mirror: $TAG"
            else
              echo "‚è≠Ô∏è  Skipping unknown pattern: $TAG"
            fi
          done

          # Mirror the filtered tags
          echo ""
          echo "üîÑ Starting mirror of ${#TAGS_TO_MIRROR[@]} multi-architecture images to GHCR..."
          FAILED=0
          SUCCEEDED=0

          for TAG in "${TAGS_TO_MIRROR[@]}"; do
            echo ""
            echo "üì¶ Mirroring: ${TAG}"

            if skopeo copy \
              --all \
              --retry-times 3 \
              --dest-precompute-digests \
              --src-no-creds \
              --dest-creds "tcpipuk:${{ secrets.GHCR_SYNC }}" \
              "docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE}:${TAG}" \
              "docker://${DEST_REGISTRY}/${DEST_IMAGE}:${TAG}"; then
              echo "‚úÖ Successfully mirrored: ${TAG}"
              SUCCEEDED=$((SUCCEEDED + 1))
            else
              echo "‚ùå Failed to mirror: ${TAG}"
              FAILED=$((FAILED + 1))
            fi
          done

          # Summary report
          echo ""
          echo "================================================"
          echo "üìä Mirror Summary:"
          echo "   Total discovered: $(echo "$ALL_TAGS" | wc -w) tags"
          echo "   Filtered for mirroring: ${#TAGS_TO_MIRROR[@]} tags"
          echo "   Successfully mirrored: ${SUCCEEDED}"
          echo "   Failed: ${FAILED}"
          echo "================================================"

          if [ $FAILED -gt 0 ]; then
            echo "‚ö†Ô∏è Warning: Some images failed to mirror"
            exit 1
          else
            echo "‚úÖ All images mirrored successfully!"
          fi

      - name: Verify critical tags
        run: |
          echo "üîç Verifying critical tags on GHCR..."

          # Check that our main alias tags exist
          CRITICAL_TAGS="ubuntu-latest ubuntu-lts ubuntu-edge"
          MISSING=0

          for TAG in $CRITICAL_TAGS; do
            if skopeo inspect --no-creds "docker://ghcr.io/tcpipuk/act-runner:${TAG}" > /dev/null 2>&1; then
              echo "‚úÖ Verified: ${TAG}"
            else
              echo "‚ùå Missing critical tag: ${TAG}"
              MISSING=$((MISSING + 1))
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "‚ùå Critical tags missing!"
            exit 1
          else
            echo "‚úÖ All critical tags verified!"
          fi
