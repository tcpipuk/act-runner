name: Build Runner Images

on:
  push:
    branches-ignore:
      - 'update-image-versions'  # Exclude automated README update branch
    paths:
      - "docker/ubuntu.Dockerfile"
      - "docker/fedora.Dockerfile"
      - "docker/debian.Dockerfile"
      - "docker/ubuntuPython.Dockerfile"
      - ".forgejo/workflows/build.yml"
  schedule:
    - cron: '0 4 * * *'  # Run daily at 4am UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: git.tomfos.tr
  IMAGE_NAME: tom/act-runner

jobs:
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      k8s-version: ${{ steps.k8s.outputs.version }}
      go-version: ${{ steps.go.outputs.version }}
      # Node.js versions (shared across all builds)
      node-previous: ${{ steps.node.outputs.node-previous }}
      node-latest: ${{ steps.node.outputs.node-latest }}
      node-unstable: ${{ steps.node.outputs.node-unstable }}
      # Python deadsnakes versions
      python-deadsnakes: ${{ steps.python.outputs.python-versions }}
      # Ubuntu Python base images
      ubuntu-python-previous-base: ${{ steps.ubuntu-python-base.outputs.previous-base }}
      ubuntu-python-latest-base: ${{ steps.ubuntu-python-base.outputs.latest-base }}
      # Ubuntu outputs
      ubuntu-previous-tag: ${{ steps.ubuntu.outputs.previous-tag }}
      ubuntu-previous: ${{ steps.ubuntu.outputs.previous-version }}
      ubuntu-previous-python: ${{ steps.ubuntu.outputs.previous-python }}
      ubuntu-latest-tag: ${{ steps.ubuntu.outputs.latest-tag }}
      ubuntu-latest: ${{ steps.ubuntu.outputs.latest-version }}
      ubuntu-latest-python: ${{ steps.ubuntu.outputs.latest-python }}
      ubuntu-rolling-tag: ${{ steps.ubuntu.outputs.unstable-tag }}
      ubuntu-rolling: ${{ steps.ubuntu.outputs.unstable-version }}
      ubuntu-rolling-python: ${{ steps.ubuntu.outputs.unstable-python }}
      # Fedora outputs
      fedora-previous-tag: ${{ steps.fedora.outputs.previous-tag }}
      fedora-previous: ${{ steps.fedora.outputs.previous-version }}
      fedora-previous-python: ${{ steps.fedora.outputs.previous-python }}
      fedora-latest-tag: ${{ steps.fedora.outputs.latest-tag }}
      fedora-latest: ${{ steps.fedora.outputs.latest-version }}
      fedora-latest-python: ${{ steps.fedora.outputs.latest-python }}
      fedora-rawhide-tag: ${{ steps.fedora.outputs.unstable-tag }}
      fedora-rawhide: ${{ steps.fedora.outputs.unstable-version }}
      fedora-rawhide-python: ${{ steps.fedora.outputs.unstable-python }}
      # Debian outputs
      debian-oldstable-tag: ${{ steps.debian.outputs.previous-tag }}
      debian-oldstable: ${{ steps.debian.outputs.previous-version }}
      debian-oldstable-python: ${{ steps.debian.outputs.previous-python }}
      debian-oldstable-codename: ${{ steps.debian.outputs.previous-codename }}
      debian-stable-tag: ${{ steps.debian.outputs.latest-tag }}
      debian-stable: ${{ steps.debian.outputs.latest-version }}
      debian-stable-python: ${{ steps.debian.outputs.latest-python }}
      debian-stable-codename: ${{ steps.debian.outputs.latest-codename }}
      debian-sid-tag: ${{ steps.debian.outputs.unstable-tag }}
      debian-sid: ${{ steps.debian.outputs.unstable-version }}
      debian-sid-python: ${{ steps.debian.outputs.unstable-python }}
      debian-sid-codename: ${{ steps.debian.outputs.unstable-codename }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDKIT_ENDPOINT != '' && 'remote' || 'docker-container' }}
          endpoint: ${{ env.BUILDKIT_ENDPOINT || '' }}

      - name: Get stable K8s version
        id: k8s
        run: |
          K8S_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt | cut -d. -f1-2 | sed 's/v//')
          echo "version=${K8S_VERSION}" >> $GITHUB_OUTPUT
          echo "🎯 Kubernetes stable version: ${K8S_VERSION}"

      - name: Get stable Go version
        id: go
        run: |
          GO_VERSION=$(curl -fsSL 'https://go.dev/dl/?mode=json' | jq -r '[.[] | select(.stable==true)][0].version' | sed 's/^go//')
          echo "version=${GO_VERSION}" >> $GITHUB_OUTPUT
          echo "🎯 Go stable version: ${GO_VERSION}"

      - name: Detect Node.js versions
        id: node
        uses: ./.forgejo/actions/check-nodejs-versions

      - name: Prepare Ubuntu builds
        id: ubuntu
        uses: ./.forgejo/actions/prepare-build-inputs
        with:
          os-name: ubuntu
          previous-tag: jammy
          latest-tag: latest
          unstable-tag: rolling

      - name: Prepare Fedora builds
        id: fedora
        uses: ./.forgejo/actions/prepare-build-inputs
        with:
          os-name: fedora
          previous-tag: "41"
          latest-tag: latest
          unstable-tag: rawhide

      - name: Prepare Debian builds
        id: debian
        uses: ./.forgejo/actions/prepare-build-inputs
        with:
          os-name: debian
          previous-tag: oldstable
          latest-tag: stable
          unstable-tag: sid

      - name: Detect Python versions for deadsnakes
        id: python
        uses: ./.forgejo/actions/check-deadsnakes-versions
        with:
          ubuntu-versions: "${{ steps.ubuntu.outputs.previous-version }} ${{ steps.ubuntu.outputs.latest-version }}"
          limit: "1"

      - name: Generate Ubuntu Python base image names
        id: ubuntu-python-base
        run: |
          # Use single Node.js versions for base image tags
          UBUNTU_PREV_NODE_TAG="${{ steps.node.outputs.node-previous }}"
          UBUNTU_LATEST_NODE_TAG="${{ steps.node.outputs.node-latest }}"

          echo "previous-base=git.tomfos.tr/tom/act-runner:ubuntu${{ steps.ubuntu.outputs.previous-version }}-node${UBUNTU_PREV_NODE_TAG}-py${{ steps.ubuntu.outputs.previous-python }}" >> $GITHUB_OUTPUT
          echo "latest-base=git.tomfos.tr/tom/act-runner:ubuntu${{ steps.ubuntu.outputs.latest-version }}-node${UBUNTU_LATEST_NODE_TAG}-py${{ steps.ubuntu.outputs.latest-python }}" >> $GITHUB_OUTPUT

  build-ubuntu:
    name: Build Ubuntu ${{ matrix.variant == 'previous' && 'Previous' || matrix.variant == 'latest' && 'Latest' || matrix.variant == 'rolling' && 'Rolling' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: "previous"
          - variant: "latest"
          - variant: "rolling"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate Ubuntu tags
        id: ubuntu-tags
        uses: ./.forgejo/actions/generate-image-tags
        with:
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          os-name: ubuntu
          os-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous || matrix.variant == 'latest' && needs.prepare.outputs.ubuntu-latest || matrix.variant == 'rolling' && needs.prepare.outputs.ubuntu-rolling }}
          node-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.node-previous || matrix.variant == 'latest' && needs.prepare.outputs.node-latest || matrix.variant == 'rolling' && needs.prepare.outputs.node-unstable }}
          python-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous-python || matrix.variant == 'latest' && needs.prepare.outputs.ubuntu-latest-python || matrix.variant == 'rolling' && needs.prepare.outputs.ubuntu-rolling-python }}
          variant: ${{ matrix.variant }}
          branch-name: ${{ github.ref_name }}

      - name: Build and push Ubuntu image
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/ubuntu.Dockerfile
          push: true
          tags: ${{ steps.ubuntu-tags.outputs.tags }}
          build-args: |
            UBUNTU_TAG=${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous-tag || matrix.variant == 'latest' && needs.prepare.outputs.ubuntu-latest-tag || matrix.variant == 'rolling' && needs.prepare.outputs.ubuntu-rolling-tag }}
            UBUNTU_VERSION=${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous || matrix.variant == 'latest' && needs.prepare.outputs.ubuntu-latest || matrix.variant == 'rolling' && needs.prepare.outputs.ubuntu-rolling }}
            NODE_VERSION=${{ matrix.variant == 'previous' && needs.prepare.outputs.node-previous || matrix.variant == 'latest' && needs.prepare.outputs.node-latest || matrix.variant == 'rolling' && needs.prepare.outputs.node-unstable }}
            PYTHON_VERSION=${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous-python || matrix.variant == 'latest' && needs.prepare.outputs.ubuntu-latest-python || matrix.variant == 'rolling' && needs.prepare.outputs.ubuntu-rolling-python }}
            USE_NATIVE_PYTHON=true
            GO_VERSION=${{ needs.prepare.outputs.go-version }}
            K8S_VERSION=${{ needs.prepare.outputs.k8s-version }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-ubuntu-python:
    name: Build Ubuntu ${{ matrix.variant == 'previous' && 'Previous' || matrix.variant == 'latest' && 'Latest' }} Python 3.13
    runs-on: ubuntu-latest
    needs: [prepare, build-ubuntu]
    strategy:
      fail-fast: false
      matrix:
        variant: ["previous", "latest"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate Ubuntu Python tags
        id: ubuntu-python-tags
        uses: ./.forgejo/actions/generate-image-tags
        with:
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          os-name: ubuntu
          os-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous || needs.prepare.outputs.ubuntu-latest }}
          node-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.node-previous || needs.prepare.outputs.node-latest }}
          python-version: ${{ needs.prepare.outputs.python-deadsnakes }}
          branch-name: ${{ github.ref_name }}

      - name: Build and push Ubuntu Python image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/ubuntuPython.Dockerfile
          push: true
          tags: ${{ steps.ubuntu-python-tags.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-python-previous-base || needs.prepare.outputs.ubuntu-python-latest-base }}
            PYTHON_VERSION=${{ needs.prepare.outputs.python-deadsnakes }}
            UBUNTU_VERSION=${{ matrix.variant == 'previous' && needs.prepare.outputs.ubuntu-previous || needs.prepare.outputs.ubuntu-latest }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-fedora:
    name: Build Fedora ${{ matrix.variant == 'previous' && 'Previous' || matrix.variant == 'latest' && 'Latest' || matrix.variant == 'rawhide' && 'Rawhide' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        variant: ["previous", "latest", "rawhide"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate Fedora tags
        id: fedora-tags
        uses: ./.forgejo/actions/generate-image-tags
        with:
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          os-name: fedora
          os-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.fedora-previous || matrix.variant == 'latest' && needs.prepare.outputs.fedora-latest || matrix.variant == 'rawhide' && needs.prepare.outputs.fedora-rawhide }}
          node-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.node-previous || matrix.variant == 'latest' && needs.prepare.outputs.node-latest || matrix.variant == 'rawhide' && needs.prepare.outputs.node-unstable }}
          python-version: ${{ matrix.variant == 'previous' && needs.prepare.outputs.fedora-previous-python || matrix.variant == 'latest' && needs.prepare.outputs.fedora-latest-python || matrix.variant == 'rawhide' && needs.prepare.outputs.fedora-rawhide-python }}
          variant: ${{ matrix.variant }}
          branch-name: ${{ github.ref_name }}

      - name: Build and push Fedora image
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/fedora.Dockerfile
          push: true
          tags: ${{ steps.fedora-tags.outputs.tags }}
          build-args: |
            FEDORA_TAG=${{ matrix.variant == 'previous' && needs.prepare.outputs.fedora-previous-tag || matrix.variant == 'latest' && needs.prepare.outputs.fedora-latest-tag || matrix.variant == 'rawhide' && needs.prepare.outputs.fedora-rawhide-tag }}
            FEDORA_VERSION=${{ matrix.variant == 'previous' && needs.prepare.outputs.fedora-previous || matrix.variant == 'latest' && needs.prepare.outputs.fedora-latest || matrix.variant == 'rawhide' && needs.prepare.outputs.fedora-rawhide }}
            NODE_VERSION=${{ matrix.variant == 'previous' && needs.prepare.outputs.node-previous || matrix.variant == 'latest' && needs.prepare.outputs.node-latest || matrix.variant == 'rawhide' && needs.prepare.outputs.node-unstable }}
            GO_VERSION=${{ needs.prepare.outputs.go-version }}
            K8S_VERSION=${{ needs.prepare.outputs.k8s-version }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  build-debian:
    name: Build Debian ${{ matrix.variant == 'oldstable' && 'Oldstable' || matrix.variant == 'stable' && 'Stable' || matrix.variant == 'sid' && 'Sid/Unstable' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        variant: ["oldstable", "stable", "sid"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://buildkit:8125

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.FORGEJO_TOKEN }}

      - name: Generate Debian tags
        id: debian-tags
        uses: ./.forgejo/actions/generate-image-tags
        with:
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          os-name: debian
          os-version: ${{ matrix.variant == 'oldstable' && needs.prepare.outputs.debian-oldstable || matrix.variant == 'stable' && needs.prepare.outputs.debian-stable || matrix.variant == 'sid' && needs.prepare.outputs.debian-sid }}
          node-version: ${{ matrix.variant == 'oldstable' && needs.prepare.outputs.node-previous || matrix.variant == 'stable' && needs.prepare.outputs.node-latest || matrix.variant == 'sid' && needs.prepare.outputs.node-unstable }}
          python-version: ${{ matrix.variant == 'oldstable' && needs.prepare.outputs.debian-oldstable-python || matrix.variant == 'stable' && needs.prepare.outputs.debian-stable-python || matrix.variant == 'sid' && needs.prepare.outputs.debian-sid-python }}
          variant: ${{ matrix.variant == 'stable' && 'latest' || matrix.variant }}
          branch-name: ${{ github.ref_name }}

      - name: Build and push Debian image
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/debian.Dockerfile
          push: true
          tags: ${{ steps.debian-tags.outputs.tags }}
          build-args: |
            DEBIAN_TAG=${{ matrix.variant == 'oldstable' && needs.prepare.outputs.debian-oldstable-tag || matrix.variant == 'stable' && needs.prepare.outputs.debian-stable-tag || matrix.variant == 'sid' && needs.prepare.outputs.debian-sid-tag }}
            DEBIAN_VERSION=${{ matrix.variant == 'oldstable' && needs.prepare.outputs.debian-oldstable || matrix.variant == 'stable' && needs.prepare.outputs.debian-stable || matrix.variant == 'sid' && needs.prepare.outputs.debian-sid }}
            NODE_VERSION=${{ matrix.variant == 'oldstable' && needs.prepare.outputs.node-previous || matrix.variant == 'stable' && needs.prepare.outputs.node-latest || matrix.variant == 'sid' && needs.prepare.outputs.node-unstable }}
            GO_VERSION=${{ needs.prepare.outputs.go-version }}
            K8S_VERSION=${{ needs.prepare.outputs.k8s-version }}
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x

  mirror-to-github:
    name: Mirror Images to GHCR
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-fedora, build-debian]
    if: github.ref_name == 'main'
    steps:
      - name: Install skopeo and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Discover and mirror image tags
        env:
          SOURCE_REGISTRY: git.tomfos.tr
          SOURCE_IMAGE: tom/act-runner
          DEST_REGISTRY: ghcr.io
          DEST_IMAGE: tcpipuk/act-runner
        run: |
          echo "🔍 Discovering tags from source registry..."

          # Get all tags from source registry
          ALL_TAGS=$(skopeo list-tags docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE} | jq -r '.Tags[]' | sort)

          # Filter tags: exclude branch builds and other unwanted patterns
          TAGS_TO_MIRROR=()

          for TAG in $ALL_TAGS; do

            # Include our patterns:
            # - Ubuntu: ubuntu{version}-node{version}-py{python}, ubuntu-{previous,latest,rolling}
            # - Fedora: fedora{version}-node{version}-py{python}, fedora-{previous,latest,rawhide}
            # - Debian: debian{version}-node{version}-py{python}, debian-{oldstable,latest,sid}
            if [[ "$TAG" =~ ^ubuntu[0-9]+\.[0-9]+-node[0-9]+-py[0-9]+\.[0-9]+$ ]] || \
               [[ "$TAG" =~ ^fedora[0-9]+-node[0-9]+-py[0-9]+\.[0-9]+$ ]] || \
               [[ "$TAG" =~ ^fedorarawhide-node[0-9]+-py[0-9]+\.[0-9]+$ ]] || \
               [[ "$TAG" =~ ^debian[0-9]+-node[0-9]+-py[0-9]+\.[0-9]+$ ]] || \
               [[ "$TAG" =~ ^debiansid-node[0-9]+-py[0-9]+\.[0-9]+$ ]] || \
               [[ "$TAG" =~ ^(ubuntu|fedora)-(previous|latest|rolling|rawhide)$ ]] || \
               [[ "$TAG" =~ ^debian-(oldstable|latest|sid)$ ]]; then
              TAGS_TO_MIRROR+=("$TAG")
              echo "✅ Will mirror: $TAG"
            else
              echo "⏭️  Skipping unknown pattern: $TAG"
            fi
          done

          # Mirror the filtered tags
          echo ""
          echo "🔄 Starting mirror of ${#TAGS_TO_MIRROR[@]} multi-architecture images to GHCR..."
          FAILED=0
          SUCCEEDED=0

          for TAG in "${TAGS_TO_MIRROR[@]}"; do
            echo ""
            echo "📦 Mirroring: ${TAG}"

            if skopeo copy \
              --quiet \
              --all \
              --retry-times 3 \
              --dest-precompute-digests \
              --src-no-creds \
              --dest-creds "tcpipuk:${{ secrets.GHCR_SYNC }}" \
              "docker://${SOURCE_REGISTRY}/${SOURCE_IMAGE}:${TAG}" \
              "docker://${DEST_REGISTRY}/${DEST_IMAGE}:${TAG}"; then
              echo "✅ Successfully mirrored: ${TAG}"
              SUCCEEDED=$((SUCCEEDED + 1))
            else
              echo "❌ Failed to mirror: ${TAG}"
              FAILED=$((FAILED + 1))
            fi
          done

          # Summary report
          echo ""
          echo "================================================"
          echo "📊 Mirror Summary:"
          echo "   Total discovered: $(echo "$ALL_TAGS" | wc -w) tags"
          echo "   Filtered for mirroring: ${#TAGS_TO_MIRROR[@]} tags"
          echo "   Successfully mirrored: ${SUCCEEDED}"
          echo "   Failed: ${FAILED}"
          echo "================================================"

          if [ $FAILED -gt 0 ]; then
            echo "⚠️ Warning: Some images failed to mirror"
            exit 1
          else
            echo "✅ All images mirrored successfully!"
          fi

      - name: Verify critical tags
        run: |
          echo "🔍 Verifying critical tags on GHCR..."

          # Check that our main alias tags exist
          CRITICAL_TAGS="ubuntu-previous ubuntu-latest ubuntu-rolling fedora-previous fedora-latest fedora-rawhide"
          MISSING=0

          for TAG in $CRITICAL_TAGS; do
            if skopeo inspect --no-creds "docker://ghcr.io/tcpipuk/act-runner:${TAG}" > /dev/null 2>&1; then
              echo "✅ Verified: ${TAG}"
            else
              echo "❌ Missing critical tag: ${TAG}"
              MISSING=$((MISSING + 1))
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "❌ Critical tags missing!"
            exit 1
          else
            echo "✅ All critical tags verified!"
          fi

  update-readme:
    name: Update README if needed
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-fedora, prepare]
    if: github.ref_name == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.FORGEJO_TOKEN }}
          fetch-depth: 0

      - name: Generate images tables
        id: tables
        run: |
          echo "📝 Generating Ubuntu and Fedora images tables..."

          # Define all Python versions we support (matches the matrix in build-ubuntu)
          PYTHON_VERSIONS="3.13"

          # Get versions from prepare outputs
          UBUNTU_PREV_VERSION="${{ needs.prepare.outputs.ubuntu-previous }}"
          UBUNTU_PREV_PYTHON="${{ needs.prepare.outputs.ubuntu-previous-python }}"
          UBUNTU_LATEST_VERSION="${{ needs.prepare.outputs.ubuntu-latest }}"
          UBUNTU_LATEST_PYTHON="${{ needs.prepare.outputs.ubuntu-latest-python }}"
          UBUNTU_ROLLING_VERSION="${{ needs.prepare.outputs.ubuntu-rolling }}"
          UBUNTU_ROLLING_PYTHON="${{ needs.prepare.outputs.ubuntu-rolling-python }}"

          FEDORA_PREV_VERSION="${{ needs.prepare.outputs.fedora-previous }}"
          FEDORA_PREV_PYTHON="${{ needs.prepare.outputs.fedora-previous-python }}"
          FEDORA_LATEST_VERSION="${{ needs.prepare.outputs.fedora-latest }}"
          FEDORA_LATEST_PYTHON="${{ needs.prepare.outputs.fedora-latest-python }}"
          FEDORA_RAWHIDE_VERSION="${{ needs.prepare.outputs.fedora-rawhide }}"
          FEDORA_RAWHIDE_PYTHON="${{ needs.prepare.outputs.fedora-rawhide-python }}"

          DEBIAN_OLDSTABLE_VERSION="${{ needs.prepare.outputs.debian-oldstable }}"
          DEBIAN_OLDSTABLE_CODENAME="${{ needs.prepare.outputs.debian-oldstable-codename }}"
          DEBIAN_OLDSTABLE_PYTHON="${{ needs.prepare.outputs.debian-oldstable-python }}"
          DEBIAN_STABLE_VERSION="${{ needs.prepare.outputs.debian-stable }}"
          DEBIAN_STABLE_CODENAME="${{ needs.prepare.outputs.debian-stable-codename }}"
          DEBIAN_STABLE_PYTHON="${{ needs.prepare.outputs.debian-stable-python }}"
          DEBIAN_SID_VERSION="${{ needs.prepare.outputs.debian-sid }}"
          DEBIAN_SID_CODENAME="${{ needs.prepare.outputs.debian-sid-codename }}"
          DEBIAN_SID_PYTHON="${{ needs.prepare.outputs.debian-sid-python }}"

          NODE_PREVIOUS="${{ needs.prepare.outputs.node-previous }}"
          NODE_LATEST="${{ needs.prepare.outputs.node-latest }}"
          NODE_UNSTABLE="${{ needs.prepare.outputs.node-unstable }}"

          # Use single Node versions directly
          NODE_PREVIOUS_DISPLAY="${NODE_PREVIOUS}"
          NODE_LATEST_DISPLAY="${NODE_LATEST}"
          NODE_UNSTABLE_DISPLAY="${NODE_UNSTABLE}"
          NODE_PREVIOUS_TAG="${NODE_PREVIOUS}"
          NODE_LATEST_TAG="${NODE_LATEST}"
          NODE_UNSTABLE_TAG="${NODE_UNSTABLE}"

          # Generate Ubuntu images table
          {
            echo "| Ubuntu Version | Alias Tag | Node.js | Python Versions Available |"
            echo "|----------------|-----------|---------|---------------------------|"
            echo "| ${UBUNTU_ROLLING_VERSION} (Development) | **[\`ubuntu-rolling\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-rolling)** | ${NODE_UNSTABLE_DISPLAY} | [***${UBUNTU_ROLLING_PYTHON}***](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${UBUNTU_ROLLING_VERSION}-node${NODE_UNSTABLE_TAG}-py${UBUNTU_ROLLING_PYTHON}) |"
            echo "| ${UBUNTU_LATEST_VERSION} LTS (Current) | **[\`ubuntu-latest\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-latest)** | ${NODE_LATEST_DISPLAY} | [***${UBUNTU_LATEST_PYTHON}***](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${UBUNTU_LATEST_VERSION}-node${NODE_LATEST_TAG}-py${UBUNTU_LATEST_PYTHON}), [${PYTHON_VERSIONS}](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${UBUNTU_LATEST_VERSION}-node${NODE_LATEST_TAG}-py${PYTHON_VERSIONS}) |"
            echo "| ${UBUNTU_PREV_VERSION} LTS (Previous) | **[\`ubuntu-previous\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu-previous)** | ${NODE_PREVIOUS_DISPLAY} | [***${UBUNTU_PREV_PYTHON}***](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${UBUNTU_PREV_VERSION}-node${NODE_PREVIOUS_TAG}-py${UBUNTU_PREV_PYTHON}), [${PYTHON_VERSIONS}](https://git.tomfos.tr/tom/-/packages/container/act-runner/ubuntu${UBUNTU_PREV_VERSION}-node${NODE_PREVIOUS_TAG}-py${PYTHON_VERSIONS}) |"
            echo ""
            echo "**Note**: ***Italicised*** versions are the native Python for each Ubuntu release. Non-native"
            echo "versions use the latest stable Python (${PYTHON_VERSIONS}) from deadsnakes PPA."
            echo ""
          } > /tmp/ubuntu-images.md

          # Generate Fedora images table
          {
            echo "| Fedora Version | Alias Tag | Node.js | Python Versions Available |"
            echo "|----------------|-----------|---------|---------------------------|"
            echo "| Rawhide (Development) | **[\`fedora-rawhide\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora-rawhide)** | ${NODE_UNSTABLE_DISPLAY} | [**${FEDORA_RAWHIDE_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedorarawhide-node${NODE_UNSTABLE_TAG}-py${FEDORA_RAWHIDE_PYTHON}) |"
            echo "| ${FEDORA_LATEST_VERSION} (Current) | **[\`fedora-latest\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora-latest)** | ${NODE_LATEST_DISPLAY} | [**${FEDORA_LATEST_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora${FEDORA_LATEST_VERSION}-node${NODE_LATEST_TAG}-py${FEDORA_LATEST_PYTHON}) |"
            echo "| ${FEDORA_PREV_VERSION} (Previous) | **[\`fedora-previous\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora-previous)** | ${NODE_PREVIOUS_DISPLAY} | [**${FEDORA_PREV_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/fedora${FEDORA_PREV_VERSION}-node${NODE_PREVIOUS_TAG}-py${FEDORA_PREV_PYTHON}) |"
          } > /tmp/fedora-images.md

          # Generate Debian images table
          {
            echo "| Debian Version | Alias Tag | Node.js | Python Versions Available |"
            echo "|----------------|-----------|---------|---------------------------|"
            echo "| ${DEBIAN_SID_VERSION} (${DEBIAN_SID_CODENAME^} - Sid/Unstable) | **[\`debian-sid\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/debian-sid)** | ${NODE_UNSTABLE_DISPLAY} | [**${DEBIAN_SID_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/debian${DEBIAN_SID_VERSION}-node${NODE_UNSTABLE_TAG}-py${DEBIAN_SID_PYTHON}) |"
            echo "| ${DEBIAN_STABLE_VERSION} (${DEBIAN_STABLE_CODENAME^} - Stable) | **[\`debian-latest\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/debian-latest)** | ${NODE_LATEST_DISPLAY} | [**${DEBIAN_STABLE_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/debian${DEBIAN_STABLE_VERSION}-node${NODE_LATEST_TAG}-py${DEBIAN_STABLE_PYTHON}) |"
            echo "| ${DEBIAN_OLDSTABLE_VERSION} (${DEBIAN_OLDSTABLE_CODENAME^} - Oldstable) | **[\`debian-oldstable\`](https://git.tomfos.tr/tom/-/packages/container/act-runner/debian-oldstable)** | ${NODE_PREVIOUS_DISPLAY} | [**${DEBIAN_OLDSTABLE_PYTHON}**](https://git.tomfos.tr/tom/-/packages/container/act-runner/debian${DEBIAN_OLDSTABLE_VERSION}-node${NODE_PREVIOUS_TAG}-py${DEBIAN_OLDSTABLE_PYTHON}) |"
            echo ""
            echo "**Note**: Debian images use only the native Python version for each release,"
            echo "providing better system integration than external PPAs."
            echo ""
          } > /tmp/debian-images.md

          echo "✅ Generated all three images tables"

      - name: Update README
        id: update
        run: |
          echo "📝 Updating README with all three images tables..."

          # Read current README
          CURRENT_README=$(cat README.md)

          # Extract and update Ubuntu images table
          UBUNTU_CONTENT=$(cat /tmp/ubuntu-images.md)
          NEW_README=$(echo "$CURRENT_README" | awk -v table="$UBUNTU_CONTENT" '
            BEGIN { in_table = 0 }
            /^## Ubuntu images/ { print; getline; print; getline; print; getline; print; print table; in_table = 1; next }
            in_table && /^## / { in_table = 0; print ""; print; next }
            in_table { next }
            { print }
          ')

          # Extract and update Fedora images table
          FEDORA_CONTENT=$(cat /tmp/fedora-images.md)
          NEW_README=$(echo "$NEW_README" | awk -v table="$FEDORA_CONTENT" '
            BEGIN { in_table = 0 }
            /^## Fedora images/ { print; getline; print; getline; print; getline; print; print table; in_table = 1; next }
            in_table && /^## / { in_table = 0; print ""; print; next }
            in_table { next }
            { print }
          ')

          # Extract and update Debian images table
          DEBIAN_CONTENT=$(cat /tmp/debian-images.md)
          NEW_README=$(echo "$NEW_README" | awk -v table="$DEBIAN_CONTENT" '
            BEGIN { in_table = 0 }
            /^## Debian images/ { print; getline; print; getline; print; getline; print; print table; in_table = 1; next }
            in_table && /^## / { in_table = 0; print ""; print; next }
            in_table { next }
            { print }
          ')

          # Write updated README
          echo "$NEW_README" > README.md

          # Check if there are changes
          if git diff --quiet README.md; then
            echo "❌ No changes to README.md"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ README.md has been updated"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo ""
            echo "📝 Changes to README.md:"
            echo "================================================"
            git diff --color=always README.md | head -100
            echo "================================================"
          fi

      - name: Create Pull Request
        if: steps.update.outputs.changed == 'true'
        uses: ./.forgejo/actions/create-pull-request
        with:
          token: ${{ secrets.FORGEJO_TOKEN }}
          branch-name: update-image-versions
          commit-message: |
            chore: update Ubuntu and Fedora images in README

            Node.js Previous: ${{ needs.prepare.outputs.node-previous }}
            Node.js Latest: ${{ needs.prepare.outputs.node-latest }}
            Node.js Unstable: ${{ needs.prepare.outputs.node-unstable }}
            Ubuntu Previous: ${{ needs.prepare.outputs.ubuntu-previous }} (Python ${{ needs.prepare.outputs.ubuntu-previous-python }})
            Ubuntu Latest: ${{ needs.prepare.outputs.ubuntu-latest }} (Python ${{ needs.prepare.outputs.ubuntu-latest-python }})
            Ubuntu Rolling: ${{ needs.prepare.outputs.ubuntu-rolling }} (Python ${{ needs.prepare.outputs.ubuntu-rolling-python }})
            Fedora Previous: ${{ needs.prepare.outputs.fedora-previous }} (Python ${{ needs.prepare.outputs.fedora-previous-python }})
            Fedora Latest: ${{ needs.prepare.outputs.fedora-latest }} (Python ${{ needs.prepare.outputs.fedora-latest-python }})
            Fedora Rawhide: Python ${{ needs.prepare.outputs.fedora-rawhide-python }}
          pr-title: "chore: update Ubuntu and Fedora images in README"
          pr-body: |
            ### Automated Images Update

            This PR updates both Ubuntu and Fedora images tables to reflect the current runtime versions:

            **Node.js Versions:**
            - Previous: ${{ needs.prepare.outputs.node-previous }}
            - Latest: ${{ needs.prepare.outputs.node-latest }}
            - Unstable: ${{ needs.prepare.outputs.node-unstable }}

            **Ubuntu Releases:**
            - Previous: ${{ needs.prepare.outputs.ubuntu-previous }} (Python ${{ needs.prepare.outputs.ubuntu-previous-python }})
            - Latest: ${{ needs.prepare.outputs.ubuntu-latest }} (Python ${{ needs.prepare.outputs.ubuntu-latest-python }})
            - Rolling: ${{ needs.prepare.outputs.ubuntu-rolling }} (Python ${{ needs.prepare.outputs.ubuntu-rolling-python }})

            **Fedora Releases:**
            - Previous: ${{ needs.prepare.outputs.fedora-previous }} (Python ${{ needs.prepare.outputs.fedora-previous-python }})
            - Latest: ${{ needs.prepare.outputs.fedora-latest }} (Python ${{ needs.prepare.outputs.fedora-latest-python }})
            - Rawhide: Python ${{ needs.prepare.outputs.fedora-rawhide-python }}

            The images tables are regenerated based on the actual images being built.
          files-to-commit: README.md
